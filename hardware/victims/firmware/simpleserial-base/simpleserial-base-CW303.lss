
simpleserial-base-CW303.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c1e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00802000  00000c1e  00000cb2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000e4  00802010  00802010  00000cc2  2**0
                  ALLOC
  3 .stab         000000c0  00000000  00000000  00000cc4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000003f  00000000  00000000  00000d84  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00000dc3  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000dd4  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 00000140  00000000  00000000  00000e14  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   000043d7  00000000  00000000  00000f54  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00002cad  00000000  00000000  0000532b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00000cbb  00000000  00000000  00007fd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  0000046c  00000000  00000000  00008c94  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000208a  00000000  00000000  00009100  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00001188  00000000  00000000  0000b18a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000018  00000000  00000000  0000c312  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__ctors_end>
   4:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
   8:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
   c:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  10:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  14:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  18:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  1c:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  20:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  24:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  28:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  2c:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  30:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  34:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  38:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  3c:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  40:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  44:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  48:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  4c:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  50:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  54:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  58:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  5c:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  60:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  64:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  68:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  6c:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  70:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  74:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  78:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  7c:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  80:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  84:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  88:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  8c:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  90:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  94:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  98:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  9c:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  a0:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  a4:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  a8:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  ac:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  b0:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  b4:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  b8:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  bc:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  c0:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  c4:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  c8:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  cc:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  d0:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  d4:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  d8:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  dc:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  e0:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  e4:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  e8:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  ec:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  f0:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  f4:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  f8:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  fc:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
 100:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
 104:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
 108:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
 10c:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
 110:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
 114:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
 118:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
 11c:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
 120:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
 124:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
 128:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
 12c:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
 130:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
 134:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
 138:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
 13c:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
 140:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
 144:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
 148:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
 14c:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
 150:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
 154:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
 158:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
 15c:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
 160:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
 164:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
 168:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
 16c:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
 170:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
 174:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
 178:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
 17c:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
 180:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
 184:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
 188:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
 18c:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
 190:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
 194:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
 198:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
 19c:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
 1a0:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
 1a4:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
 1a8:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
 1ac:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
 1b0:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
 1b4:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
 1b8:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
 1bc:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
 1c0:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
 1c4:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>

000001c8 <__trampolines_start>:
 1c8:	0c 94 a5 01 	jmp	0x34a	; 0x34a <check_version>
 1cc:	0c 94 94 01 	jmp	0x328	; 0x328 <reset>
 1d0:	0c 94 a3 01 	jmp	0x346	; 0x346 <get_key>
 1d4:	0c 94 96 01 	jmp	0x32c	; 0x32c <get_pt>

000001d8 <__trampolines_end>:
 1d8:	01 02       	muls	r16, r17
 1da:	04 08       	sbc	r0, r4
 1dc:	10 20       	and	r1, r0
 1de:	40 80       	ld	r4, Z
 1e0:	1b 36       	cpi	r17, 0x6B	; 107

000001e2 <aes_sbox>:
 1e2:	63 7c 77 7b f2 6b 6f c5 30 01 67 2b fe d7 ab 76     c|w{.ko.0.g+...v
 1f2:	ca 82 c9 7d fa 59 47 f0 ad d4 a2 af 9c a4 72 c0     ...}.YG.......r.
 202:	b7 fd 93 26 36 3f f7 cc 34 a5 e5 f1 71 d8 31 15     ...&6?..4...q.1.
 212:	04 c7 23 c3 18 96 05 9a 07 12 80 e2 eb 27 b2 75     ..#..........'.u
 222:	09 83 2c 1a 1b 6e 5a a0 52 3b d6 b3 29 e3 2f 84     ..,..nZ.R;..)./.
 232:	53 d1 00 ed 20 fc b1 5b 6a cb be 39 4a 4c 58 cf     S... ..[j..9JLX.
 242:	d0 ef aa fb 43 4d 33 85 45 f9 02 7f 50 3c 9f a8     ....CM3.E...P<..
 252:	51 a3 40 8f 92 9d 38 f5 bc b6 da 21 10 ff f3 d2     Q.@...8....!....
 262:	cd 0c 13 ec 5f 97 44 17 c4 a7 7e 3d 64 5d 19 73     ...._.D...~=d].s
 272:	60 81 4f dc 22 2a 90 88 46 ee b8 14 de 5e 0b db     `.O."*..F....^..
 282:	e0 32 3a 0a 49 06 24 5c c2 d3 ac 62 91 95 e4 79     .2:.I.$\...b...y
 292:	e7 c8 37 6d 8d d5 4e a9 6c 56 f4 ea 65 7a ae 08     ..7m..N.lV..ez..
 2a2:	ba 78 25 2e 1c a6 b4 c6 e8 dd 74 1f 4b bd 8b 8a     .x%.......t.K...
 2b2:	70 3e b5 66 48 03 f6 0e 61 35 57 b9 86 c1 1d 9e     p>.fH...a5W.....
 2c2:	e1 f8 98 11 69 d9 8e 94 9b 1e 87 e9 ce 55 28 df     ....i........U(.
 2d2:	8c a1 89 0d bf e6 42 68 41 99 2d 0f b0 54 bb 16     ......BhA.-..T..

000002e2 <__ctors_end>:
 2e2:	11 24       	eor	r1, r1
 2e4:	1f be       	out	0x3f, r1	; 63
 2e6:	cf ef       	ldi	r28, 0xFF	; 255
 2e8:	cd bf       	out	0x3d, r28	; 61
 2ea:	df e3       	ldi	r29, 0x3F	; 63
 2ec:	de bf       	out	0x3e, r29	; 62
 2ee:	00 e0       	ldi	r16, 0x00	; 0
 2f0:	0c bf       	out	0x3c, r16	; 60

000002f2 <__do_copy_data>:
 2f2:	10 e2       	ldi	r17, 0x20	; 32
 2f4:	a0 e0       	ldi	r26, 0x00	; 0
 2f6:	b0 e2       	ldi	r27, 0x20	; 32
 2f8:	ee e1       	ldi	r30, 0x1E	; 30
 2fa:	fc e0       	ldi	r31, 0x0C	; 12
 2fc:	00 e0       	ldi	r16, 0x00	; 0
 2fe:	0b bf       	out	0x3b, r16	; 59
 300:	02 c0       	rjmp	.+4      	; 0x306 <__do_copy_data+0x14>
 302:	07 90       	elpm	r0, Z+
 304:	0d 92       	st	X+, r0
 306:	a0 31       	cpi	r26, 0x10	; 16
 308:	b1 07       	cpc	r27, r17
 30a:	d9 f7       	brne	.-10     	; 0x302 <__do_copy_data+0x10>

0000030c <__do_clear_bss>:
 30c:	20 e2       	ldi	r18, 0x20	; 32
 30e:	a0 e1       	ldi	r26, 0x10	; 16
 310:	b0 e2       	ldi	r27, 0x20	; 32
 312:	01 c0       	rjmp	.+2      	; 0x316 <.do_clear_bss_start>

00000314 <.do_clear_bss_loop>:
 314:	1d 92       	st	X+, r1

00000316 <.do_clear_bss_start>:
 316:	a4 3f       	cpi	r26, 0xF4	; 244
 318:	b2 07       	cpc	r27, r18
 31a:	e1 f7       	brne	.-8      	; 0x314 <.do_clear_bss_loop>
 31c:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <main>
 320:	0c 94 0d 06 	jmp	0xc1a	; 0xc1a <_exit>

00000324 <__bad_interrupt>:
 324:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000328 <reset>:

uint8_t reset(uint8_t* x)
{
	// Reset key here if needed
	return 0x00;
}
 328:	80 e0       	ldi	r24, 0x00	; 0
 32a:	08 95       	ret

0000032c <get_pt>:
	// Load key here
	return 0x00;
}

uint8_t get_pt(uint8_t* pt)
{
 32c:	ac 01       	movw	r20, r24
	/**********************************
	* Start user-specific code here. */
	trigger_high();
 32e:	e0 e0       	ldi	r30, 0x00	; 0
 330:	f6 e0       	ldi	r31, 0x06	; 6
 332:	91 e0       	ldi	r25, 0x01	; 1
 334:	95 83       	std	Z+5, r25	; 0x05
	//from the computer. Store your response
	//back into 'pt', which will send 16 bytes
	//back to computer. Can ignore of course if
	//not needed
	
	trigger_low();
 336:	96 83       	std	Z+6, r25	; 0x06
	/* End user-specific code here. *
	********************************/
	simpleserial_put('r', 16, pt);
 338:	60 e1       	ldi	r22, 0x10	; 16
 33a:	70 e0       	ldi	r23, 0x00	; 0
 33c:	82 e7       	ldi	r24, 0x72	; 114
 33e:	0e 94 16 02 	call	0x42c	; 0x42c <simpleserial_put>
	return 0x00;
}
 342:	80 e0       	ldi	r24, 0x00	; 0
 344:	08 95       	ret

00000346 <get_key>:
 346:	80 e0       	ldi	r24, 0x00	; 0
 348:	08 95       	ret

0000034a <check_version>:
// Callback function for "v" command.
// This can exist in v1.0 as long as we don't actually send back an ack ("z")
uint8_t check_version(uint8_t* v)
{
	return 0x00;
}
 34a:	80 e0       	ldi	r24, 0x00	; 0
 34c:	08 95       	ret

0000034e <hex_decode>:
	'0', '1', '2', '3', '4', '5', '6', '7',
	'8', '9', 'A', 'B', 'C', 'D', 'E', 'F'
};

int hex_decode(int len, char* ascii_buf, uint8_t* data_buf)
{
 34e:	db 01       	movw	r26, r22
	for(int i = 0; i < len; i++)
 350:	fa 01       	movw	r30, r20
 352:	9f 01       	movw	r18, r30
 354:	24 1b       	sub	r18, r20
 356:	35 0b       	sbc	r19, r21
 358:	28 17       	cp	r18, r24
 35a:	39 07       	cpc	r19, r25
 35c:	d4 f5       	brge	.+116    	; 0x3d2 <hex_decode+0x84>
	{
		char n_hi = ascii_buf[2*i];
 35e:	2c 91       	ld	r18, X
		char n_lo = ascii_buf[2*i+1];
 360:	11 96       	adiw	r26, 0x01	; 1
 362:	3c 91       	ld	r19, X
 364:	11 97       	sbiw	r26, 0x01	; 1

		if(n_lo >= '0' && n_lo <= '9')
 366:	60 ed       	ldi	r22, 0xD0	; 208
 368:	63 0f       	add	r22, r19
 36a:	6a 30       	cpi	r22, 0x0A	; 10
 36c:	10 f4       	brcc	.+4      	; 0x372 <hex_decode+0x24>
			data_buf[i] = n_lo - '0';
 36e:	60 83       	st	Z, r22
 370:	0f c0       	rjmp	.+30     	; 0x390 <hex_decode+0x42>
		else if(n_lo >= 'A' && n_lo <= 'F')
 372:	6f eb       	ldi	r22, 0xBF	; 191
 374:	63 0f       	add	r22, r19
 376:	66 30       	cpi	r22, 0x06	; 6
 378:	10 f4       	brcc	.+4      	; 0x37e <hex_decode+0x30>
			data_buf[i] = n_lo - 'A' + 10;
 37a:	37 53       	subi	r19, 0x37	; 55
 37c:	08 c0       	rjmp	.+16     	; 0x38e <hex_decode+0x40>
		else if(n_lo >= 'a' && n_lo <= 'f')
 37e:	6f e9       	ldi	r22, 0x9F	; 159
 380:	63 0f       	add	r22, r19
 382:	66 30       	cpi	r22, 0x06	; 6
 384:	18 f0       	brcs	.+6      	; 0x38c <hex_decode+0x3e>
			data_buf[i] = n_lo - 'a' + 10;
		else
			return 1;
 386:	81 e0       	ldi	r24, 0x01	; 1
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	08 95       	ret
		if(n_lo >= '0' && n_lo <= '9')
			data_buf[i] = n_lo - '0';
		else if(n_lo >= 'A' && n_lo <= 'F')
			data_buf[i] = n_lo - 'A' + 10;
		else if(n_lo >= 'a' && n_lo <= 'f')
			data_buf[i] = n_lo - 'a' + 10;
 38c:	37 55       	subi	r19, 0x57	; 87
 38e:	30 83       	st	Z, r19
		else
			return 1;

		if(n_hi >= '0' && n_hi <= '9')
 390:	30 ed       	ldi	r19, 0xD0	; 208
 392:	32 0f       	add	r19, r18
 394:	3a 30       	cpi	r19, 0x0A	; 10
 396:	18 f4       	brcc	.+6      	; 0x39e <hex_decode+0x50>
			data_buf[i] |= (n_hi - '0') << 4;
 398:	22 95       	swap	r18
 39a:	20 7f       	andi	r18, 0xF0	; 240
 39c:	14 c0       	rjmp	.+40     	; 0x3c6 <hex_decode+0x78>
		else if(n_hi >= 'A' && n_hi <= 'F')
 39e:	3f eb       	ldi	r19, 0xBF	; 191
 3a0:	32 0f       	add	r19, r18
 3a2:	36 30       	cpi	r19, 0x06	; 6
 3a4:	20 f4       	brcc	.+8      	; 0x3ae <hex_decode+0x60>
			data_buf[i] |= (n_hi - 'A' + 10) << 4;
 3a6:	30 e0       	ldi	r19, 0x00	; 0
 3a8:	27 53       	subi	r18, 0x37	; 55
 3aa:	31 09       	sbc	r19, r1
 3ac:	07 c0       	rjmp	.+14     	; 0x3bc <hex_decode+0x6e>
		else if(n_hi >= 'a' && n_hi <= 'f')
 3ae:	3f e9       	ldi	r19, 0x9F	; 159
 3b0:	32 0f       	add	r19, r18
 3b2:	36 30       	cpi	r19, 0x06	; 6
 3b4:	40 f7       	brcc	.-48     	; 0x386 <hex_decode+0x38>
			data_buf[i] |= (n_hi - 'a' + 10) << 4;
 3b6:	30 e0       	ldi	r19, 0x00	; 0
 3b8:	27 55       	subi	r18, 0x57	; 87
 3ba:	31 09       	sbc	r19, r1
 3bc:	64 e0       	ldi	r22, 0x04	; 4
 3be:	22 0f       	add	r18, r18
 3c0:	33 1f       	adc	r19, r19
 3c2:	6a 95       	dec	r22
 3c4:	e1 f7       	brne	.-8      	; 0x3be <hex_decode+0x70>
 3c6:	30 81       	ld	r19, Z
 3c8:	23 2b       	or	r18, r19
 3ca:	20 83       	st	Z, r18
 3cc:	31 96       	adiw	r30, 0x01	; 1
 3ce:	12 96       	adiw	r26, 0x02	; 2
 3d0:	c0 cf       	rjmp	.-128    	; 0x352 <hex_decode+0x4>
		else
			return 1;
	}

	return 0;
 3d2:	80 e0       	ldi	r24, 0x00	; 0
 3d4:	90 e0       	ldi	r25, 0x00	; 0
}
 3d6:	08 95       	ret

000003d8 <simpleserial_addcmd>:
	simpleserial_addcmd('v', 0, check_version);
}

int simpleserial_addcmd(char c, unsigned int len, uint8_t (*fp)(uint8_t*))
{
	if(num_commands >= MAX_SS_CMDS)
 3d8:	20 91 10 20 	lds	r18, 0x2010	; 0x802010 <__data_end>
 3dc:	30 91 11 20 	lds	r19, 0x2011	; 0x802011 <__data_end+0x1>
 3e0:	2a 30       	cpi	r18, 0x0A	; 10
 3e2:	31 05       	cpc	r19, r1
 3e4:	cc f4       	brge	.+50     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
		return 1;

	if(len >= MAX_SS_LEN)
 3e6:	60 34       	cpi	r22, 0x40	; 64
 3e8:	71 05       	cpc	r23, r1
 3ea:	b0 f4       	brcc	.+44     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
		return 1;

	commands[num_commands].c   = c;
 3ec:	95 e0       	ldi	r25, 0x05	; 5
 3ee:	92 9f       	mul	r25, r18
 3f0:	f0 01       	movw	r30, r0
 3f2:	93 9f       	mul	r25, r19
 3f4:	f0 0d       	add	r31, r0
 3f6:	11 24       	eor	r1, r1
 3f8:	ee 5e       	subi	r30, 0xEE	; 238
 3fa:	ff 4d       	sbci	r31, 0xDF	; 223
 3fc:	80 83       	st	Z, r24
	commands[num_commands].len = len;
 3fe:	61 83       	std	Z+1, r22	; 0x01
 400:	72 83       	std	Z+2, r23	; 0x02
	commands[num_commands].fp  = fp;
 402:	43 83       	std	Z+3, r20	; 0x03
 404:	54 83       	std	Z+4, r21	; 0x04
	num_commands++;
 406:	2f 5f       	subi	r18, 0xFF	; 255
 408:	3f 4f       	sbci	r19, 0xFF	; 255
 40a:	20 93 10 20 	sts	0x2010, r18	; 0x802010 <__data_end>
 40e:	30 93 11 20 	sts	0x2011, r19	; 0x802011 <__data_end+0x1>

	return 0;
 412:	80 e0       	ldi	r24, 0x00	; 0
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	08 95       	ret
}

int simpleserial_addcmd(char c, unsigned int len, uint8_t (*fp)(uint8_t*))
{
	if(num_commands >= MAX_SS_CMDS)
		return 1;
 418:	81 e0       	ldi	r24, 0x01	; 1
 41a:	90 e0       	ldi	r25, 0x00	; 0
	commands[num_commands].len = len;
	commands[num_commands].fp  = fp;
	num_commands++;

	return 0;
}
 41c:	08 95       	ret

0000041e <simpleserial_init>:

// Set up the SimpleSerial module by preparing internal commands
// This just adds the "v" command for now...
void simpleserial_init()
{
	simpleserial_addcmd('v', 0, check_version);
 41e:	45 ea       	ldi	r20, 0xA5	; 165
 420:	51 e0       	ldi	r21, 0x01	; 1
 422:	60 e0       	ldi	r22, 0x00	; 0
 424:	70 e0       	ldi	r23, 0x00	; 0
 426:	86 e7       	ldi	r24, 0x76	; 118
 428:	0c 94 ec 01 	jmp	0x3d8	; 0x3d8 <simpleserial_addcmd>

0000042c <simpleserial_put>:
	simpleserial_put('z', 1, ret);
#endif
}

void simpleserial_put(char c, int size, uint8_t* output)
{
 42c:	cf 92       	push	r12
 42e:	df 92       	push	r13
 430:	ef 92       	push	r14
 432:	ff 92       	push	r15
 434:	0f 93       	push	r16
 436:	1f 93       	push	r17
 438:	cf 93       	push	r28
 43a:	df 93       	push	r29
 43c:	8b 01       	movw	r16, r22
 43e:	ea 01       	movw	r28, r20
	// Write first character
	putch(c);
 440:	0e 94 15 03 	call	0x62a	; 0x62a <output_ch_0>

	// Write each byte as two nibbles
	for(int i = 0; i < size; i++)
 444:	7e 01       	movw	r14, r28
 446:	c7 01       	movw	r24, r14
 448:	8c 1b       	sub	r24, r28
 44a:	9d 0b       	sbc	r25, r29
 44c:	80 17       	cp	r24, r16
 44e:	91 07       	cpc	r25, r17
 450:	b4 f4       	brge	.+44     	; 0x47e <simpleserial_put+0x52>
 452:	67 01       	movw	r12, r14
	{
		putch(hex_lookup[output[i] >> 4 ]);
 454:	d7 01       	movw	r26, r14
 456:	ed 91       	ld	r30, X+
 458:	7d 01       	movw	r14, r26
 45a:	e2 95       	swap	r30
 45c:	ef 70       	andi	r30, 0x0F	; 15
 45e:	f0 e0       	ldi	r31, 0x00	; 0
 460:	e0 50       	subi	r30, 0x00	; 0
 462:	f0 4e       	sbci	r31, 0xE0	; 224
 464:	80 81       	ld	r24, Z
 466:	0e 94 15 03 	call	0x62a	; 0x62a <output_ch_0>
		putch(hex_lookup[output[i] & 0xF]);
 46a:	d6 01       	movw	r26, r12
 46c:	ec 91       	ld	r30, X
 46e:	ef 70       	andi	r30, 0x0F	; 15
 470:	f0 e0       	ldi	r31, 0x00	; 0
 472:	e0 50       	subi	r30, 0x00	; 0
 474:	f0 4e       	sbci	r31, 0xE0	; 224
 476:	80 81       	ld	r24, Z
 478:	0e 94 15 03 	call	0x62a	; 0x62a <output_ch_0>
 47c:	e4 cf       	rjmp	.-56     	; 0x446 <simpleserial_put+0x1a>
	}

	// Write trailing '\n'
	putch('\n');
 47e:	8a e0       	ldi	r24, 0x0A	; 10
}
 480:	df 91       	pop	r29
 482:	cf 91       	pop	r28
 484:	1f 91       	pop	r17
 486:	0f 91       	pop	r16
 488:	ff 90       	pop	r15
 48a:	ef 90       	pop	r14
 48c:	df 90       	pop	r13
 48e:	cf 90       	pop	r12
		putch(hex_lookup[output[i] >> 4 ]);
		putch(hex_lookup[output[i] & 0xF]);
	}

	// Write trailing '\n'
	putch('\n');
 490:	0c 94 15 03 	jmp	0x62a	; 0x62a <output_ch_0>

00000494 <simpleserial_get>:

	return 0;
}

void simpleserial_get(void)
{
 494:	af 92       	push	r10
 496:	bf 92       	push	r11
 498:	cf 92       	push	r12
 49a:	df 92       	push	r13
 49c:	ef 92       	push	r14
 49e:	ff 92       	push	r15
 4a0:	0f 93       	push	r16
 4a2:	1f 93       	push	r17
 4a4:	cf 93       	push	r28
 4a6:	df 93       	push	r29
 4a8:	cd b7       	in	r28, 0x3d	; 61
 4aa:	de b7       	in	r29, 0x3e	; 62
 4ac:	c1 5c       	subi	r28, 0xC1	; 193
 4ae:	d1 09       	sbc	r29, r1
 4b0:	cd bf       	out	0x3d, r28	; 61
 4b2:	de bf       	out	0x3e, r29	; 62
	char ascii_buf[2*MAX_SS_LEN];
	uint8_t data_buf[MAX_SS_LEN];
	char c;

	// Find which command we're receiving
	c = getch();
 4b4:	0e 94 0e 03 	call	0x61c	; 0x61c <input_ch_0>

	int cmd;
	for(cmd = 0; cmd < num_commands; cmd++)
 4b8:	40 91 10 20 	lds	r20, 0x2010	; 0x802010 <__data_end>
 4bc:	50 91 11 20 	lds	r21, 0x2011	; 0x802011 <__data_end+0x1>
 4c0:	22 e1       	ldi	r18, 0x12	; 18
 4c2:	30 e2       	ldi	r19, 0x20	; 32
 4c4:	00 e0       	ldi	r16, 0x00	; 0
 4c6:	10 e0       	ldi	r17, 0x00	; 0
 4c8:	04 17       	cp	r16, r20
 4ca:	15 07       	cpc	r17, r21
 4cc:	54 f4       	brge	.+20     	; 0x4e2 <simpleserial_get+0x4e>
 4ce:	2b 5f       	subi	r18, 0xFB	; 251
 4d0:	3f 4f       	sbci	r19, 0xFF	; 255
	{
		if(commands[cmd].c == c)
 4d2:	f9 01       	movw	r30, r18
 4d4:	35 97       	sbiw	r30, 0x05	; 5
 4d6:	90 81       	ld	r25, Z
 4d8:	89 17       	cp	r24, r25
 4da:	39 f0       	breq	.+14     	; 0x4ea <simpleserial_get+0x56>

	// Find which command we're receiving
	c = getch();

	int cmd;
	for(cmd = 0; cmd < num_commands; cmd++)
 4dc:	0f 5f       	subi	r16, 0xFF	; 255
 4de:	1f 4f       	sbci	r17, 0xFF	; 255
 4e0:	f3 cf       	rjmp	.-26     	; 0x4c8 <simpleserial_get+0x34>
		if(commands[cmd].c == c)
			break;
	}

	// If we didn't find a match, give up right away
	if(cmd == num_commands)
 4e2:	04 17       	cp	r16, r20
 4e4:	15 07       	cpc	r17, r21
 4e6:	09 f4       	brne	.+2      	; 0x4ea <simpleserial_get+0x56>
 4e8:	54 c0       	rjmp	.+168    	; 0x592 <simpleserial_get+0xfe>
 4ea:	9e 01       	movw	r18, r28
 4ec:	2f 5f       	subi	r18, 0xFF	; 255
 4ee:	3f 4f       	sbci	r19, 0xFF	; 255
 4f0:	79 01       	movw	r14, r18

	// Find which command we're receiving
	c = getch();

	int cmd;
	for(cmd = 0; cmd < num_commands; cmd++)
 4f2:	69 01       	movw	r12, r18
	// If we didn't find a match, give up right away
	if(cmd == num_commands)
		return;

	// Receive characters until we fill the ASCII buffer
	for(int i = 0; i < 2*commands[cmd].len; i++)
 4f4:	25 e0       	ldi	r18, 0x05	; 5
 4f6:	20 9f       	mul	r18, r16
 4f8:	c0 01       	movw	r24, r0
 4fa:	21 9f       	mul	r18, r17
 4fc:	90 0d       	add	r25, r0
 4fe:	11 24       	eor	r1, r1
 500:	dc 01       	movw	r26, r24
 502:	ad 5e       	subi	r26, 0xED	; 237
 504:	bf 4d       	sbci	r27, 0xDF	; 223
 506:	5d 01       	movw	r10, r26
 508:	d5 01       	movw	r26, r10
 50a:	8d 91       	ld	r24, X+
 50c:	9c 91       	ld	r25, X
 50e:	88 0f       	add	r24, r24
 510:	99 1f       	adc	r25, r25
 512:	96 01       	movw	r18, r12
 514:	2e 19       	sub	r18, r14
 516:	3f 09       	sbc	r19, r15
 518:	28 17       	cp	r18, r24
 51a:	39 07       	cpc	r19, r25
 51c:	50 f4       	brcc	.+20     	; 0x532 <simpleserial_get+0x9e>
	{
		c = getch();
 51e:	0e 94 0e 03 	call	0x61c	; 0x61c <input_ch_0>

		// Check for early \n
		if(c == '\n' || c == '\r')
 522:	8a 30       	cpi	r24, 0x0A	; 10
 524:	b1 f1       	breq	.+108    	; 0x592 <simpleserial_get+0xfe>
 526:	8d 30       	cpi	r24, 0x0D	; 13
 528:	a1 f1       	breq	.+104    	; 0x592 <simpleserial_get+0xfe>
			return;

		ascii_buf[i] = c;
 52a:	f6 01       	movw	r30, r12
 52c:	81 93       	st	Z+, r24
 52e:	6f 01       	movw	r12, r30
 530:	eb cf       	rjmp	.-42     	; 0x508 <simpleserial_get+0x74>
	}

	// Assert that last character is \n or \r
	c = getch();
 532:	0e 94 0e 03 	call	0x61c	; 0x61c <input_ch_0>
	if(c != '\n' && c != '\r')
 536:	8a 30       	cpi	r24, 0x0A	; 10
 538:	11 f0       	breq	.+4      	; 0x53e <simpleserial_get+0xaa>
 53a:	8d 30       	cpi	r24, 0x0D	; 13
 53c:	51 f5       	brne	.+84     	; 0x592 <simpleserial_get+0xfe>
		return;

	// ASCII buffer is full: convert to bytes 
	// Check for illegal characters here
	if(hex_decode(commands[cmd].len, ascii_buf, data_buf))
 53e:	25 e0       	ldi	r18, 0x05	; 5
 540:	20 9f       	mul	r18, r16
 542:	c0 01       	movw	r24, r0
 544:	21 9f       	mul	r18, r17
 546:	90 0d       	add	r25, r0
 548:	11 24       	eor	r1, r1
 54a:	8c 01       	movw	r16, r24
 54c:	0e 5e       	subi	r16, 0xEE	; 238
 54e:	1f 4d       	sbci	r17, 0xDF	; 223
 550:	ae 01       	movw	r20, r28
 552:	4f 57       	subi	r20, 0x7F	; 127
 554:	5f 4f       	sbci	r21, 0xFF	; 255
 556:	b7 01       	movw	r22, r14
 558:	f8 01       	movw	r30, r16
 55a:	81 81       	ldd	r24, Z+1	; 0x01
 55c:	92 81       	ldd	r25, Z+2	; 0x02
 55e:	0e 94 a7 01 	call	0x34e	; 0x34e <hex_decode>
 562:	89 2b       	or	r24, r25
 564:	b1 f4       	brne	.+44     	; 0x592 <simpleserial_get+0xfe>
		return;

	// Callback
	uint8_t ret[1];
	ret[0] = commands[cmd].fp(data_buf);
 566:	d8 01       	movw	r26, r16
 568:	13 96       	adiw	r26, 0x03	; 3
 56a:	ed 91       	ld	r30, X+
 56c:	fc 91       	ld	r31, X
 56e:	14 97       	sbiw	r26, 0x04	; 4
 570:	ce 01       	movw	r24, r28
 572:	8f 57       	subi	r24, 0x7F	; 127
 574:	9f 4f       	sbci	r25, 0xFF	; 255
 576:	19 95       	eicall
 578:	cf 53       	subi	r28, 0x3F	; 63
 57a:	df 4f       	sbci	r29, 0xFF	; 255
 57c:	88 83       	st	Y, r24
 57e:	c1 5c       	subi	r28, 0xC1	; 193
 580:	d0 40       	sbci	r29, 0x00	; 0
	
	// Acknowledge (if version is 1.1)
#if SS_VER == SS_VER_1_1
	simpleserial_put('z', 1, ret);
 582:	ae 01       	movw	r20, r28
 584:	4f 53       	subi	r20, 0x3F	; 63
 586:	5f 4f       	sbci	r21, 0xFF	; 255
 588:	61 e0       	ldi	r22, 0x01	; 1
 58a:	70 e0       	ldi	r23, 0x00	; 0
 58c:	8a e7       	ldi	r24, 0x7A	; 122
 58e:	0e 94 16 02 	call	0x42c	; 0x42c <simpleserial_put>
#endif
}
 592:	cf 53       	subi	r28, 0x3F	; 63
 594:	df 4f       	sbci	r29, 0xFF	; 255
 596:	cd bf       	out	0x3d, r28	; 61
 598:	de bf       	out	0x3e, r29	; 62
 59a:	df 91       	pop	r29
 59c:	cf 91       	pop	r28
 59e:	1f 91       	pop	r17
 5a0:	0f 91       	pop	r16
 5a2:	ff 90       	pop	r15
 5a4:	ef 90       	pop	r14
 5a6:	df 90       	pop	r13
 5a8:	cf 90       	pop	r12
 5aa:	bf 90       	pop	r11
 5ac:	af 90       	pop	r10
 5ae:	08 95       	ret

000005b0 <init_uart0>:
   )
   {
/* This PORT setting is only valid to USARTC0 if other USARTs is used a
	 * different PORT and/or pins is used. */
	/* PIN3 (TXD0) as output. */
	PORTC.DIRSET = PIN3_bm;
 5b0:	e0 e4       	ldi	r30, 0x40	; 64
 5b2:	f6 e0       	ldi	r31, 0x06	; 6
 5b4:	88 e0       	ldi	r24, 0x08	; 8
 5b6:	81 83       	std	Z+1, r24	; 0x01

	/* PC2 (RXD0) as input. */
	PORTC.DIRCLR = PIN2_bm;
 5b8:	84 e0       	ldi	r24, 0x04	; 4
 5ba:	82 83       	std	Z+2, r24	; 0x02

	/* USARTC0, 8 Data bits, No Parity, 1 Stop bit. */
	USART_Format_Set(&USART, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, false);
 5bc:	e0 ea       	ldi	r30, 0xA0	; 160
 5be:	f8 e0       	ldi	r31, 0x08	; 8
 5c0:	83 e0       	ldi	r24, 0x03	; 3
 5c2:	85 83       	std	Z+5, r24	; 0x05
	 * Do not use the baudrate scale factor
	 *
	 * Baudrate select = (1/(16*(((I/O clock frequency)/Baudrate)-1)
	 *                 = 12
	 */
	USART_Baudrate_Set(&USART, 11, 0);
 5c4:	8b e0       	ldi	r24, 0x0B	; 11
 5c6:	86 83       	std	Z+6, r24	; 0x06
 5c8:	17 82       	std	Z+7, r1	; 0x07

	/* Enable both RX and TX. */
	USART_Rx_Enable(&USART);
 5ca:	84 81       	ldd	r24, Z+4	; 0x04
 5cc:	80 61       	ori	r24, 0x10	; 16
 5ce:	84 83       	std	Z+4, r24	; 0x04
	USART_Tx_Enable(&USART);
 5d0:	84 81       	ldd	r24, Z+4	; 0x04
 5d2:	88 60       	ori	r24, 0x08	; 8
 5d4:	84 83       	std	Z+4, r24	; 0x04
 5d6:	08 95       	ret

000005d8 <input_ch_w_timeout_0>:
unsigned char									input_ch_w_timeout_0
	(
   char *					 	data,
   volatile unsigned int				timeout
   )
   {
 5d8:	cf 93       	push	r28
 5da:	df 93       	push	r29
 5dc:	1f 92       	push	r1
 5de:	1f 92       	push	r1
 5e0:	cd b7       	in	r28, 0x3d	; 61
 5e2:	de b7       	in	r29, 0x3e	; 62
 5e4:	69 83       	std	Y+1, r22	; 0x01
 5e6:	7a 83       	std	Y+2, r23	; 0x02
   unsigned int				timeout_counter = 0;
 5e8:	20 e0       	ldi	r18, 0x00	; 0
 5ea:	30 e0       	ldi	r19, 0x00	; 0

   
   //check if a byte has been recieved or if the timeout has been excedded
   while (timeout_counter != timeout)
 5ec:	49 81       	ldd	r20, Y+1	; 0x01
 5ee:	5a 81       	ldd	r21, Y+2	; 0x02
 5f0:	24 17       	cp	r18, r20
 5f2:	35 07       	cpc	r19, r21
 5f4:	69 f0       	breq	.+26     	; 0x610 <input_ch_w_timeout_0+0x38>
		{	
		if (USART_IsRXComplete(&USART))
 5f6:	40 91 a1 08 	lds	r20, 0x08A1	; 0x8008a1 <__TEXT_REGION_LENGTH__+0x7008a1>
 5fa:	47 ff       	sbrs	r20, 7
 5fc:	06 c0       	rjmp	.+12     	; 0x60a <input_ch_w_timeout_0+0x32>
			{
			*data = USART_GetChar(&USART);
 5fe:	20 91 a0 08 	lds	r18, 0x08A0	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
 602:	fc 01       	movw	r30, r24
 604:	20 83       	st	Z, r18
			return BYTE_REC;
 606:	81 e0       	ldi	r24, 0x01	; 1
 608:	04 c0       	rjmp	.+8      	; 0x612 <input_ch_w_timeout_0+0x3a>
			}
		timeout_counter++;
 60a:	2f 5f       	subi	r18, 0xFF	; 255
 60c:	3f 4f       	sbci	r19, 0xFF	; 255
 60e:	ee cf       	rjmp	.-36     	; 0x5ec <input_ch_w_timeout_0+0x14>
		}
		
	return TIMEOUT;
 610:	80 e0       	ldi	r24, 0x00	; 0
	}
 612:	0f 90       	pop	r0
 614:	0f 90       	pop	r0
 616:	df 91       	pop	r29
 618:	cf 91       	pop	r28
 61a:	08 95       	ret

0000061c <input_ch_0>:
	(
   void
   )
   {
   //check if a byte has been recieved or if the timeout has been excedded
   while (!USART_IsRXComplete(&USART))
 61c:	80 91 a1 08 	lds	r24, 0x08A1	; 0x8008a1 <__TEXT_REGION_LENGTH__+0x7008a1>
 620:	87 ff       	sbrs	r24, 7
 622:	fc cf       	rjmp	.-8      	; 0x61c <input_ch_0>
		{
		continue;		
		}		
	return USART_GetChar(&USART);;
 624:	80 91 a0 08 	lds	r24, 0x08A0	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
	}
 628:	08 95       	ret

0000062a <output_ch_0>:
void												output_ch_0
	(
	char							data
	)
	{
	while(!USART_IsTXDataRegisterEmpty(&USART));
 62a:	90 91 a1 08 	lds	r25, 0x08A1	; 0x8008a1 <__TEXT_REGION_LENGTH__+0x7008a1>
 62e:	95 ff       	sbrs	r25, 5
 630:	fc cf       	rjmp	.-8      	; 0x62a <output_ch_0>
	USART_PutChar(&USART, data);
 632:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
 636:	08 95       	ret

00000638 <USART_InterruptDriver_Initialize>:
 *  \param dreIntLevel          Data register empty interrupt level.
 */
void USART_InterruptDriver_Initialize(USART_data_t * usart_data,
                                      USART_t * usart,
                                      USART_DREINTLVL_t dreIntLevel)
{
 638:	fc 01       	movw	r30, r24
	usart_data->usart = usart;
 63a:	60 83       	st	Z, r22
 63c:	71 83       	std	Z+1, r23	; 0x01
	usart_data->dreIntLevel = dreIntLevel;
 63e:	42 83       	std	Z+2, r20	; 0x02

	usart_data->buffer.RX_Tail = 0;
 640:	14 86       	std	Z+12, r1	; 0x0c
	usart_data->buffer.RX_Head = 0;
 642:	13 86       	std	Z+11, r1	; 0x0b
	usart_data->buffer.TX_Tail = 0;
 644:	16 86       	std	Z+14, r1	; 0x0e
	usart_data->buffer.TX_Head = 0;
 646:	15 86       	std	Z+13, r1	; 0x0d
 648:	08 95       	ret

0000064a <USART_InterruptDriver_DreInterruptLevel_Set>:
 *  \param dreIntLevel        Interrupt level of the DRE interrupt.
 */
void USART_InterruptDriver_DreInterruptLevel_Set(USART_data_t * usart_data,
                                                 USART_DREINTLVL_t dreIntLevel)
{
	usart_data->dreIntLevel = dreIntLevel;
 64a:	fc 01       	movw	r30, r24
 64c:	62 83       	std	Z+2, r22	; 0x02
 64e:	08 95       	ret

00000650 <USART_TXBuffer_FreeSpace>:
 *
 *  \retval true      There is data in the receive buffer.
 *  \retval false     The receive buffer is empty.
 */
bool USART_TXBuffer_FreeSpace(USART_data_t * usart_data)
{
 650:	fc 01       	movw	r30, r24
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = (usart_data->buffer.TX_Head + 1) & USART_TX_BUFFER_MASK;
 652:	95 85       	ldd	r25, Z+13	; 0x0d
	uint8_t tempTail = usart_data->buffer.TX_Tail;
 654:	26 85       	ldd	r18, Z+14	; 0x0e

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
 656:	9f 5f       	subi	r25, 0xFF	; 255
 658:	93 70       	andi	r25, 0x03	; 3
 65a:	81 e0       	ldi	r24, 0x01	; 1
 65c:	92 13       	cpse	r25, r18
 65e:	01 c0       	rjmp	.+2      	; 0x662 <USART_TXBuffer_FreeSpace+0x12>
 660:	80 e0       	ldi	r24, 0x00	; 0
}
 662:	08 95       	ret

00000664 <USART_TXBuffer_PutByte>:
 *
 *  \param usart_data The USART_data_t struct instance.
 *  \param data       The data to send.
 */
bool USART_TXBuffer_PutByte(USART_data_t * usart_data, uint8_t data)
{
 664:	1f 93       	push	r17
 666:	cf 93       	push	r28
 668:	df 93       	push	r29
 66a:	ec 01       	movw	r28, r24
 66c:	16 2f       	mov	r17, r22
	uint8_t tempTX_Head;
	bool TXBuffer_FreeSpace;
	USART_Buffer_t * TXbufPtr;

	TXbufPtr = &usart_data->buffer;
	TXBuffer_FreeSpace = USART_TXBuffer_FreeSpace(usart_data);
 66e:	0e 94 28 03 	call	0x650	; 0x650 <USART_TXBuffer_FreeSpace>


	if(TXBuffer_FreeSpace)
 672:	88 23       	and	r24, r24
 674:	79 f0       	breq	.+30     	; 0x694 <USART_TXBuffer_PutByte+0x30>
	{
	  	tempTX_Head = TXbufPtr->TX_Head;
 676:	9d 85       	ldd	r25, Y+13	; 0x0d
	  	TXbufPtr->TX[tempTX_Head]= data;
 678:	fe 01       	movw	r30, r28
 67a:	e9 0f       	add	r30, r25
 67c:	f1 1d       	adc	r31, r1
 67e:	17 83       	std	Z+7, r17	; 0x07
		/* Advance buffer head. */
		TXbufPtr->TX_Head = (tempTX_Head + 1) & USART_TX_BUFFER_MASK;
 680:	9f 5f       	subi	r25, 0xFF	; 255
 682:	93 70       	andi	r25, 0x03	; 3
 684:	9d 87       	std	Y+13, r25	; 0x0d

		/* Enable DRE interrupt. */
		tempCTRLA = usart_data->usart->CTRLA;
 686:	e8 81       	ld	r30, Y
 688:	f9 81       	ldd	r31, Y+1	; 0x01
 68a:	93 81       	ldd	r25, Z+3	; 0x03
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | usart_data->dreIntLevel;
 68c:	9c 7f       	andi	r25, 0xFC	; 252
 68e:	2a 81       	ldd	r18, Y+2	; 0x02
 690:	92 2b       	or	r25, r18
		usart_data->usart->CTRLA = tempCTRLA;
 692:	93 83       	std	Z+3, r25	; 0x03
	}
	return TXBuffer_FreeSpace;
}
 694:	df 91       	pop	r29
 696:	cf 91       	pop	r28
 698:	1f 91       	pop	r17
 69a:	08 95       	ret

0000069c <USART_RXBufferData_Available>:
 *  \retval false     The receive buffer is empty.
 */
bool USART_RXBufferData_Available(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = usart_data->buffer.RX_Head;
 69c:	fc 01       	movw	r30, r24
 69e:	23 85       	ldd	r18, Z+11	; 0x0b
	uint8_t tempTail = usart_data->buffer.RX_Tail;
 6a0:	94 85       	ldd	r25, Z+12	; 0x0c

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
 6a2:	81 e0       	ldi	r24, 0x01	; 1
 6a4:	29 13       	cpse	r18, r25
 6a6:	01 c0       	rjmp	.+2      	; 0x6aa <USART_RXBufferData_Available+0xe>
 6a8:	80 e0       	ldi	r24, 0x00	; 0
}
 6aa:	08 95       	ret

000006ac <USART_RXBuffer_GetByte>:
 *  \param usart_data       The USART_data_t struct instance.
 *
 *  \return         Received data.
 */
uint8_t USART_RXBuffer_GetByte(USART_data_t * usart_data)
{
 6ac:	fc 01       	movw	r30, r24
	USART_Buffer_t * bufPtr;
	uint8_t ans;

	bufPtr = &usart_data->buffer;
	ans = (bufPtr->RX[bufPtr->RX_Tail]);
 6ae:	84 85       	ldd	r24, Z+12	; 0x0c
 6b0:	df 01       	movw	r26, r30
 6b2:	a8 0f       	add	r26, r24
 6b4:	b1 1d       	adc	r27, r1
 6b6:	13 96       	adiw	r26, 0x03	; 3
 6b8:	8c 91       	ld	r24, X

	/* Advance buffer tail. */
	bufPtr->RX_Tail = (bufPtr->RX_Tail + 1) & USART_RX_BUFFER_MASK;
 6ba:	94 85       	ldd	r25, Z+12	; 0x0c
 6bc:	9f 5f       	subi	r25, 0xFF	; 255
 6be:	93 70       	andi	r25, 0x03	; 3
 6c0:	94 87       	std	Z+12, r25	; 0x0c

	return ans;
}
 6c2:	08 95       	ret

000006c4 <USART_RXComplete>:
 *  Stores received data in RX software buffer.
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
bool USART_RXComplete(USART_data_t * usart_data)
{
 6c4:	fc 01       	movw	r30, r24
	USART_Buffer_t * bufPtr;
	bool ans;

	bufPtr = &usart_data->buffer;
	/* Advance buffer head. */
	uint8_t tempRX_Head = (bufPtr->RX_Head + 1) & USART_RX_BUFFER_MASK;
 6c6:	83 85       	ldd	r24, Z+11	; 0x0b
 6c8:	8f 5f       	subi	r24, 0xFF	; 255
 6ca:	83 70       	andi	r24, 0x03	; 3

	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
 6cc:	24 85       	ldd	r18, Z+12	; 0x0c
	uint8_t data = usart_data->usart->DATA;
 6ce:	a0 81       	ld	r26, Z
 6d0:	b1 81       	ldd	r27, Z+1	; 0x01
 6d2:	9c 91       	ld	r25, X

	if (tempRX_Head == tempRX_Tail) {
 6d4:	82 17       	cp	r24, r18
 6d6:	49 f0       	breq	.+18     	; 0x6ea <USART_RXComplete+0x26>
	  	ans = false;
	}else{
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
 6d8:	23 85       	ldd	r18, Z+11	; 0x0b
 6da:	df 01       	movw	r26, r30
 6dc:	a2 0f       	add	r26, r18
 6de:	b1 1d       	adc	r27, r1
 6e0:	13 96       	adiw	r26, 0x03	; 3
 6e2:	9c 93       	st	X, r25
		usart_data->buffer.RX_Head = tempRX_Head;
 6e4:	83 87       	std	Z+11, r24	; 0x0b
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
	}else{
		ans = true;
 6e6:	81 e0       	ldi	r24, 0x01	; 1
 6e8:	08 95       	ret
	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
 6ea:	80 e0       	ldi	r24, 0x00	; 0
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
		usart_data->buffer.RX_Head = tempRX_Head;
	}
	return ans;
}
 6ec:	08 95       	ret

000006ee <USART_DataRegEmpty>:
 *  is empty. Argument is pointer to USART (USART_data_t).
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
void USART_DataRegEmpty(USART_data_t * usart_data)
{
 6ee:	cf 93       	push	r28
 6f0:	df 93       	push	r29
 6f2:	fc 01       	movw	r30, r24
	USART_Buffer_t * bufPtr;
	bufPtr = &usart_data->buffer;

	/* Check if all data is transmitted. */
	uint8_t tempTX_Tail = usart_data->buffer.TX_Tail;
 6f4:	96 85       	ldd	r25, Z+14	; 0x0e
	if (bufPtr->TX_Head == tempTX_Tail){
 6f6:	85 85       	ldd	r24, Z+13	; 0x0d
 6f8:	a0 81       	ld	r26, Z
 6fa:	b1 81       	ldd	r27, Z+1	; 0x01
 6fc:	98 13       	cpse	r25, r24
 6fe:	07 c0       	rjmp	.+14     	; 0x70e <USART_DataRegEmpty+0x20>
	    /* Disable DRE interrupts. */
		uint8_t tempCTRLA = usart_data->usart->CTRLA;
 700:	13 96       	adiw	r26, 0x03	; 3
 702:	8c 91       	ld	r24, X
 704:	13 97       	sbiw	r26, 0x03	; 3
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | USART_DREINTLVL_OFF_gc;
 706:	8c 7f       	andi	r24, 0xFC	; 252
		usart_data->usart->CTRLA = tempCTRLA;
 708:	13 96       	adiw	r26, 0x03	; 3
 70a:	8c 93       	st	X, r24
 70c:	0a c0       	rjmp	.+20     	; 0x722 <USART_DataRegEmpty+0x34>

	}else{
		/* Start transmitting. */
		uint8_t data = bufPtr->TX[usart_data->buffer.TX_Tail];
 70e:	86 85       	ldd	r24, Z+14	; 0x0e
 710:	ef 01       	movw	r28, r30
 712:	c8 0f       	add	r28, r24
 714:	d1 1d       	adc	r29, r1
 716:	8f 81       	ldd	r24, Y+7	; 0x07
		usart_data->usart->DATA = data;
 718:	8c 93       	st	X, r24

		/* Advance buffer tail. */
		bufPtr->TX_Tail = (bufPtr->TX_Tail + 1) & USART_TX_BUFFER_MASK;
 71a:	86 85       	ldd	r24, Z+14	; 0x0e
 71c:	8f 5f       	subi	r24, 0xFF	; 255
 71e:	83 70       	andi	r24, 0x03	; 3
 720:	86 87       	std	Z+14, r24	; 0x0e
	}
}
 722:	df 91       	pop	r29
 724:	cf 91       	pop	r28
 726:	08 95       	ret

00000728 <USART_NineBits_PutChar>:
 *
 *  \param usart      The USART module.
 *  \param data       The data to send.
 */
void USART_NineBits_PutChar(USART_t * usart, uint16_t data)
{
 728:	fc 01       	movw	r30, r24
	if(data & 0x0100) {
		usart->CTRLB |= USART_TXB8_bm;
 72a:	84 81       	ldd	r24, Z+4	; 0x04
 *  \param usart      The USART module.
 *  \param data       The data to send.
 */
void USART_NineBits_PutChar(USART_t * usart, uint16_t data)
{
	if(data & 0x0100) {
 72c:	70 ff       	sbrs	r23, 0
 72e:	02 c0       	rjmp	.+4      	; 0x734 <USART_NineBits_PutChar+0xc>
		usart->CTRLB |= USART_TXB8_bm;
 730:	81 60       	ori	r24, 0x01	; 1
 732:	01 c0       	rjmp	.+2      	; 0x736 <USART_NineBits_PutChar+0xe>
	}else {
		usart->CTRLB &= ~USART_TXB8_bm;
 734:	8e 7f       	andi	r24, 0xFE	; 254
 736:	84 83       	std	Z+4, r24	; 0x04
	}

	usart->DATA = (data & 0x00FF);
 738:	60 83       	st	Z, r22
 73a:	08 95       	ret

0000073c <USART_NineBits_GetChar>:
 *  \param usart      The USART module.
 *
 *  \retval           Received data.
 */
uint16_t USART_NineBits_GetChar(USART_t * usart)
{
 73c:	fc 01       	movw	r30, r24
	if(usart->CTRLB & USART_RXB8_bm) {
 73e:	84 81       	ldd	r24, Z+4	; 0x04
 740:	80 ff       	sbrs	r24, 0
 742:	04 c0       	rjmp	.+8      	; 0x74c <USART_NineBits_GetChar+0x10>
		return(0x0100 | usart->DATA);
 744:	80 81       	ld	r24, Z
 746:	90 e0       	ldi	r25, 0x00	; 0
 748:	91 60       	ori	r25, 0x01	; 1
 74a:	08 95       	ret
	}else {
		return(usart->DATA);
 74c:	80 81       	ld	r24, Z
 74e:	90 e0       	ldi	r25, 0x00	; 0
	}
}
 750:	08 95       	ret

00000752 <platform_init>:
#include "hal.h"
#include "xmega_hal.h"

void platform_init(void)
{  
    OSC.XOSCCTRL = 0x00;
 752:	10 92 52 00 	sts	0x0052, r1	; 0x800052 <__TEXT_REGION_LENGTH__+0x700052>
    OSC.PLLCTRL = 0x00;
 756:	10 92 55 00 	sts	0x0055, r1	; 0x800055 <__TEXT_REGION_LENGTH__+0x700055>
    OSC.CTRL |= OSC_XOSCEN_bm;
 75a:	80 91 50 00 	lds	r24, 0x0050	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
 75e:	88 60       	ori	r24, 0x08	; 8
 760:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
    
    //wait for clock
    while((OSC.STATUS & OSC_XOSCRDY_bm) == 0);
 764:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
 768:	83 ff       	sbrs	r24, 3
 76a:	fc cf       	rjmp	.-8      	; 0x764 <platform_init+0x12>
    
    //Switch clock source
    CCP = CCP_IOREG_gc;
 76c:	88 ed       	ldi	r24, 0xD8	; 216
 76e:	84 bf       	out	0x34, r24	; 52
    CLK.CTRL = CLK_SCLKSEL_XOSC_gc;    
 770:	83 e0       	ldi	r24, 0x03	; 3
 772:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
    
    //Turn off other sources besides external    
    OSC.CTRL = OSC_XOSCEN_bm;
 776:	88 e0       	ldi	r24, 0x08	; 8
 778:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
    
 #if PLATFORM == CW303
    PORTA.DIRSET = PIN5_bm | PIN6_bm;
 77c:	80 e6       	ldi	r24, 0x60	; 96
 77e:	80 93 01 06 	sts	0x0601, r24	; 0x800601 <__TEXT_REGION_LENGTH__+0x700601>
    PORTA.OUTSET = PIN5_bm | PIN6_bm;
 782:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x700605>
 786:	08 95       	ret

00000788 <aes_indep_init>:
#include "aes_keyschedule.h"

aes128_ctx_t ctx;

void aes_indep_init(void)
{
 788:	08 95       	ret

0000078a <aes_indep_key>:
	;
}

void aes_indep_key(uint8_t * key)
{
	aes128_init(key, &ctx);
 78a:	64 e4       	ldi	r22, 0x44	; 68
 78c:	70 e2       	ldi	r23, 0x20	; 32
 78e:	0c 94 c4 05 	jmp	0xb88	; 0xb88 <aes128_init>

00000792 <aes_indep_enc>:
}

void aes_indep_enc(uint8_t * pt)
{
	aes128_enc(pt, &ctx); /* encrypting the data block */
 792:	64 e4       	ldi	r22, 0x44	; 68
 794:	70 e2       	ldi	r23, 0x20	; 32
 796:	0c 94 d3 05 	jmp	0xba6	; 0xba6 <aes128_enc>

0000079a <aes_indep_mask>:
}

void aes_indep_mask(uint8_t * m)
{
 79a:	08 95       	ret

0000079c <aes_shiftcol>:
#include "gf256mul.h"
#include "aes_sbox.h"
#include "aes_enc.h"
#include <avr/pgmspace.h>

void aes_shiftcol(void* data, uint8_t shift){
 79c:	cf 93       	push	r28
 79e:	df 93       	push	r29
 7a0:	00 d0       	rcall	.+0      	; 0x7a2 <aes_shiftcol+0x6>
 7a2:	1f 92       	push	r1
 7a4:	cd b7       	in	r28, 0x3d	; 61
 7a6:	de b7       	in	r29, 0x3e	; 62
 7a8:	dc 01       	movw	r26, r24
	uint8_t tmp[4];
	tmp[0] = ((uint8_t*)data)[ 0];
 7aa:	8c 91       	ld	r24, X
 7ac:	89 83       	std	Y+1, r24	; 0x01
	tmp[1] = ((uint8_t*)data)[ 4];
 7ae:	14 96       	adiw	r26, 0x04	; 4
 7b0:	8c 91       	ld	r24, X
 7b2:	14 97       	sbiw	r26, 0x04	; 4
 7b4:	8a 83       	std	Y+2, r24	; 0x02
	tmp[2] = ((uint8_t*)data)[ 8];
 7b6:	18 96       	adiw	r26, 0x08	; 8
 7b8:	8c 91       	ld	r24, X
 7ba:	18 97       	sbiw	r26, 0x08	; 8
 7bc:	8b 83       	std	Y+3, r24	; 0x03
	tmp[3] = ((uint8_t*)data)[12];
 7be:	1c 96       	adiw	r26, 0x0c	; 12
 7c0:	8c 91       	ld	r24, X
 7c2:	1c 97       	sbiw	r26, 0x0c	; 12
 7c4:	8c 83       	std	Y+4, r24	; 0x04
	((uint8_t*)data)[ 0] = tmp[(shift+0)&3];
 7c6:	86 2f       	mov	r24, r22
 7c8:	83 70       	andi	r24, 0x03	; 3
 7ca:	e1 e0       	ldi	r30, 0x01	; 1
 7cc:	f0 e0       	ldi	r31, 0x00	; 0
 7ce:	ec 0f       	add	r30, r28
 7d0:	fd 1f       	adc	r31, r29
 7d2:	e8 0f       	add	r30, r24
 7d4:	f1 1d       	adc	r31, r1
 7d6:	80 81       	ld	r24, Z
 7d8:	8c 93       	st	X, r24
	((uint8_t*)data)[ 4] = tmp[(shift+1)&3];
 7da:	70 e0       	ldi	r23, 0x00	; 0
 7dc:	fb 01       	movw	r30, r22
 7de:	31 96       	adiw	r30, 0x01	; 1
 7e0:	e3 70       	andi	r30, 0x03	; 3
 7e2:	ff 27       	eor	r31, r31
 7e4:	81 e0       	ldi	r24, 0x01	; 1
 7e6:	90 e0       	ldi	r25, 0x00	; 0
 7e8:	8c 0f       	add	r24, r28
 7ea:	9d 1f       	adc	r25, r29
 7ec:	e8 0f       	add	r30, r24
 7ee:	f9 1f       	adc	r31, r25
 7f0:	80 81       	ld	r24, Z
 7f2:	14 96       	adiw	r26, 0x04	; 4
 7f4:	8c 93       	st	X, r24
 7f6:	14 97       	sbiw	r26, 0x04	; 4
	((uint8_t*)data)[ 8] = tmp[(shift+2)&3];
 7f8:	fb 01       	movw	r30, r22
 7fa:	32 96       	adiw	r30, 0x02	; 2
 7fc:	e3 70       	andi	r30, 0x03	; 3
 7fe:	ff 27       	eor	r31, r31
 800:	81 e0       	ldi	r24, 0x01	; 1
 802:	90 e0       	ldi	r25, 0x00	; 0
 804:	8c 0f       	add	r24, r28
 806:	9d 1f       	adc	r25, r29
 808:	e8 0f       	add	r30, r24
 80a:	f9 1f       	adc	r31, r25
 80c:	80 81       	ld	r24, Z
 80e:	18 96       	adiw	r26, 0x08	; 8
 810:	8c 93       	st	X, r24
 812:	18 97       	sbiw	r26, 0x08	; 8
	((uint8_t*)data)[12] = tmp[(shift+3)&3];
 814:	fb 01       	movw	r30, r22
 816:	33 96       	adiw	r30, 0x03	; 3
 818:	e3 70       	andi	r30, 0x03	; 3
 81a:	ff 27       	eor	r31, r31
 81c:	81 e0       	ldi	r24, 0x01	; 1
 81e:	90 e0       	ldi	r25, 0x00	; 0
 820:	8c 0f       	add	r24, r28
 822:	9d 1f       	adc	r25, r29
 824:	e8 0f       	add	r30, r24
 826:	f9 1f       	adc	r31, r25
 828:	80 81       	ld	r24, Z
 82a:	1c 96       	adiw	r26, 0x0c	; 12
 82c:	8c 93       	st	X, r24
}
 82e:	24 96       	adiw	r28, 0x04	; 4
 830:	cd bf       	out	0x3d, r28	; 61
 832:	de bf       	out	0x3e, r29	; 62
 834:	df 91       	pop	r29
 836:	cf 91       	pop	r28
 838:	08 95       	ret

0000083a <aes_encrypt_core>:
	for(i=0; i<16; ++i){
		state->s[i] ^= k->ks[i];
	}
}

void aes_encrypt_core(aes_cipher_state_t* state, const aes_genctx_t* ks, uint8_t rounds){
 83a:	2f 92       	push	r2
 83c:	3f 92       	push	r3
 83e:	4f 92       	push	r4
 840:	5f 92       	push	r5
 842:	6f 92       	push	r6
 844:	7f 92       	push	r7
 846:	8f 92       	push	r8
 848:	9f 92       	push	r9
 84a:	af 92       	push	r10
 84c:	bf 92       	push	r11
 84e:	cf 92       	push	r12
 850:	df 92       	push	r13
 852:	ef 92       	push	r14
 854:	ff 92       	push	r15
 856:	0f 93       	push	r16
 858:	1f 93       	push	r17
 85a:	cf 93       	push	r28
 85c:	df 93       	push	r29
 85e:	cd b7       	in	r28, 0x3d	; 61
 860:	de b7       	in	r29, 0x3e	; 62
 862:	63 97       	sbiw	r28, 0x13	; 19
 864:	cd bf       	out	0x3d, r28	; 61
 866:	de bf       	out	0x3e, r29	; 62
 868:	7c 01       	movw	r14, r24
 86a:	5b 01       	movw	r10, r22
 86c:	24 2e       	mov	r2, r20
 86e:	db 01       	movw	r26, r22
 870:	8a 8b       	std	Y+18, r24	; 0x12
 872:	9b 8b       	std	Y+19, r25	; 0x13
 874:	2c 01       	movw	r4, r24
 876:	20 e1       	ldi	r18, 0x10	; 16
 878:	42 0e       	add	r4, r18
 87a:	51 1c       	adc	r5, r1
 87c:	fc 01       	movw	r30, r24
	uint8_t i;
	for(i=0; i<16; ++i){
		state->s[i] ^= ks->key[0].ks[i];
 87e:	8d 91       	ld	r24, X+
 880:	90 81       	ld	r25, Z
 882:	89 27       	eor	r24, r25
 884:	81 93       	st	Z+, r24
	}
}

void aes_encrypt_core(aes_cipher_state_t* state, const aes_genctx_t* ks, uint8_t rounds){
	uint8_t i;
	for(i=0; i<16; ++i){
 886:	e4 15       	cp	r30, r4
 888:	f5 05       	cpc	r31, r5
 88a:	c9 f7       	brne	.-14     	; 0x87e <aes_encrypt_core+0x44>
 88c:	45 01       	movw	r8, r10
 88e:	30 e1       	ldi	r19, 0x10	; 16
 890:	83 0e       	add	r8, r19
 892:	91 1c       	adc	r9, r1
 894:	81 e0       	ldi	r24, 0x01	; 1
 896:	89 8b       	std	Y+17, r24	; 0x11
 898:	3e 01       	movw	r6, r28
 89a:	a1 e1       	ldi	r26, 0x11	; 17
 89c:	6a 0e       	add	r6, r26
 89e:	71 1c       	adc	r7, r1
		state->s[i] ^= ks->key[0].ks[i];
	}
	i=1;
	for(;rounds>1;--rounds){
 8a0:	21 e0       	ldi	r18, 0x01	; 1
 8a2:	22 15       	cp	r18, r2
 8a4:	08 f0       	brcs	.+2      	; 0x8a8 <aes_encrypt_core+0x6e>
 8a6:	81 c0       	rjmp	.+258    	; 0x9aa <aes_encrypt_core+0x170>
 8a8:	8e 01       	movw	r16, r28
 8aa:	0f 5f       	subi	r16, 0xFF	; 255
 8ac:	1f 4f       	sbci	r17, 0xFF	; 255
 8ae:	d8 01       	movw	r26, r16
 8b0:	c7 01       	movw	r24, r14
void aes_enc_round(aes_cipher_state_t* state, const aes_roundkey_t* k){
	uint8_t tmp[16], t;
	uint8_t i;
	/* subBytes */
	for(i=0; i<16; ++i){
		tmp[i] = pgm_read_byte(aes_sbox+state->s[i]);
 8b2:	fc 01       	movw	r30, r24
 8b4:	21 91       	ld	r18, Z+
 8b6:	cf 01       	movw	r24, r30
 8b8:	e2 2f       	mov	r30, r18
 8ba:	f0 e0       	ldi	r31, 0x00	; 0
 8bc:	ee 51       	subi	r30, 0x1E	; 30
 8be:	fe 4f       	sbci	r31, 0xFE	; 254
 8c0:	e4 91       	lpm	r30, Z
 8c2:	ed 93       	st	X+, r30
static
void aes_enc_round(aes_cipher_state_t* state, const aes_roundkey_t* k){
	uint8_t tmp[16], t;
	uint8_t i;
	/* subBytes */
	for(i=0; i<16; ++i){
 8c4:	a6 15       	cp	r26, r6
 8c6:	b7 05       	cpc	r27, r7
 8c8:	a1 f7       	brne	.-24     	; 0x8b2 <aes_encrypt_core+0x78>
		tmp[i] = pgm_read_byte(aes_sbox+state->s[i]);
	}
	/* shiftRows */
	aes_shiftcol(tmp+1, 1);
 8ca:	61 e0       	ldi	r22, 0x01	; 1
 8cc:	ce 01       	movw	r24, r28
 8ce:	02 96       	adiw	r24, 0x02	; 2
 8d0:	0e 94 ce 03 	call	0x79c	; 0x79c <aes_shiftcol>
	aes_shiftcol(tmp+2, 2);
 8d4:	62 e0       	ldi	r22, 0x02	; 2
 8d6:	ce 01       	movw	r24, r28
 8d8:	03 96       	adiw	r24, 0x03	; 3
 8da:	0e 94 ce 03 	call	0x79c	; 0x79c <aes_shiftcol>
	aes_shiftcol(tmp+3, 3);
 8de:	63 e0       	ldi	r22, 0x03	; 3
 8e0:	ce 01       	movw	r24, r28
 8e2:	04 96       	adiw	r24, 0x04	; 4
 8e4:	0e 94 ce 03 	call	0x79c	; 0x79c <aes_shiftcol>
 8e8:	67 01       	movw	r12, r14
	/* mixColums */
	for(i=0; i<4; ++i){
		t = tmp[4*i+0] ^ tmp[4*i+1] ^ tmp[4*i+2] ^ tmp[4*i+3];
 8ea:	d8 01       	movw	r26, r16
 8ec:	6c 91       	ld	r22, X
 8ee:	11 96       	adiw	r26, 0x01	; 1
 8f0:	8c 91       	ld	r24, X
 8f2:	11 97       	sbiw	r26, 0x01	; 1
 8f4:	68 27       	eor	r22, r24
 8f6:	12 96       	adiw	r26, 0x02	; 2
 8f8:	3c 90       	ld	r3, X
 8fa:	12 97       	sbiw	r26, 0x02	; 2
 8fc:	13 96       	adiw	r26, 0x03	; 3
 8fe:	8c 91       	ld	r24, X
 900:	38 26       	eor	r3, r24
 902:	36 26       	eor	r3, r22
		state->s[4*i+0] =
			  GF256MUL_2(tmp[4*i+0]^tmp[4*i+1])
 904:	4b e1       	ldi	r20, 0x1B	; 27
 906:	82 e0       	ldi	r24, 0x02	; 2
 908:	0e 94 d6 05 	call	0xbac	; 0xbac <gf256mul>
	aes_shiftcol(tmp+2, 2);
	aes_shiftcol(tmp+3, 3);
	/* mixColums */
	for(i=0; i<4; ++i){
		t = tmp[4*i+0] ^ tmp[4*i+1] ^ tmp[4*i+2] ^ tmp[4*i+3];
		state->s[4*i+0] =
 90c:	f8 01       	movw	r30, r16
 90e:	90 81       	ld	r25, Z
 910:	89 27       	eor	r24, r25
 912:	83 25       	eor	r24, r3
 914:	d6 01       	movw	r26, r12
 916:	8c 93       	st	X, r24
			  GF256MUL_2(tmp[4*i+0]^tmp[4*i+1])
			^ tmp[4*i+0]
			^ t;
		state->s[4*i+1] =
			  GF256MUL_2(tmp[4*i+1]^tmp[4*i+2])
 918:	61 81       	ldd	r22, Z+1	; 0x01
 91a:	82 81       	ldd	r24, Z+2	; 0x02
 91c:	68 27       	eor	r22, r24
 91e:	4b e1       	ldi	r20, 0x1B	; 27
 920:	82 e0       	ldi	r24, 0x02	; 2
 922:	0e 94 d6 05 	call	0xbac	; 0xbac <gf256mul>
		t = tmp[4*i+0] ^ tmp[4*i+1] ^ tmp[4*i+2] ^ tmp[4*i+3];
		state->s[4*i+0] =
			  GF256MUL_2(tmp[4*i+0]^tmp[4*i+1])
			^ tmp[4*i+0]
			^ t;
		state->s[4*i+1] =
 926:	f8 01       	movw	r30, r16
 928:	91 81       	ldd	r25, Z+1	; 0x01
 92a:	89 27       	eor	r24, r25
 92c:	83 25       	eor	r24, r3
 92e:	d6 01       	movw	r26, r12
 930:	11 96       	adiw	r26, 0x01	; 1
 932:	8c 93       	st	X, r24
			  GF256MUL_2(tmp[4*i+1]^tmp[4*i+2])
			^ tmp[4*i+1]
			^ t;
		state->s[4*i+2] =
			  GF256MUL_2(tmp[4*i+2]^tmp[4*i+3])
 934:	62 81       	ldd	r22, Z+2	; 0x02
 936:	83 81       	ldd	r24, Z+3	; 0x03
 938:	68 27       	eor	r22, r24
 93a:	4b e1       	ldi	r20, 0x1B	; 27
 93c:	82 e0       	ldi	r24, 0x02	; 2
 93e:	0e 94 d6 05 	call	0xbac	; 0xbac <gf256mul>
			^ t;
		state->s[4*i+1] =
			  GF256MUL_2(tmp[4*i+1]^tmp[4*i+2])
			^ tmp[4*i+1]
			^ t;
		state->s[4*i+2] =
 942:	f8 01       	movw	r30, r16
 944:	92 81       	ldd	r25, Z+2	; 0x02
 946:	89 27       	eor	r24, r25
 948:	83 25       	eor	r24, r3
 94a:	d6 01       	movw	r26, r12
 94c:	12 96       	adiw	r26, 0x02	; 2
 94e:	8c 93       	st	X, r24
			  GF256MUL_2(tmp[4*i+2]^tmp[4*i+3])
			^ tmp[4*i+2]
			^ t;
		state->s[4*i+3] =
			  GF256MUL_2(tmp[4*i+3]^tmp[4*i+0])
 950:	63 81       	ldd	r22, Z+3	; 0x03
 952:	80 81       	ld	r24, Z
 954:	68 27       	eor	r22, r24
 956:	4b e1       	ldi	r20, 0x1B	; 27
 958:	82 e0       	ldi	r24, 0x02	; 2
 95a:	0e 94 d6 05 	call	0xbac	; 0xbac <gf256mul>
			^ t;
		state->s[4*i+2] =
			  GF256MUL_2(tmp[4*i+2]^tmp[4*i+3])
			^ tmp[4*i+2]
			^ t;
		state->s[4*i+3] =
 95e:	f8 01       	movw	r30, r16
 960:	93 81       	ldd	r25, Z+3	; 0x03
 962:	89 27       	eor	r24, r25
 964:	38 26       	eor	r3, r24
 966:	d6 01       	movw	r26, r12
 968:	13 96       	adiw	r26, 0x03	; 3
 96a:	3c 92       	st	X, r3
 96c:	0c 5f       	subi	r16, 0xFC	; 252
 96e:	1f 4f       	sbci	r17, 0xFF	; 255
 970:	b4 e0       	ldi	r27, 0x04	; 4
 972:	cb 0e       	add	r12, r27
 974:	d1 1c       	adc	r13, r1
	/* shiftRows */
	aes_shiftcol(tmp+1, 1);
	aes_shiftcol(tmp+2, 2);
	aes_shiftcol(tmp+3, 3);
	/* mixColums */
	for(i=0; i<4; ++i){
 976:	06 15       	cp	r16, r6
 978:	17 05       	cpc	r17, r7
 97a:	09 f0       	breq	.+2      	; 0x97e <aes_encrypt_core+0x144>
 97c:	b6 cf       	rjmp	.-148    	; 0x8ea <aes_encrypt_core+0xb0>
 97e:	f7 01       	movw	r30, r14
 980:	80 e0       	ldi	r24, 0x00	; 0
 982:	90 e0       	ldi	r25, 0x00	; 0
			^ t;
	}

	/* addKey */
	for(i=0; i<16; ++i){
		state->s[i] ^= k->ks[i];
 984:	d4 01       	movw	r26, r8
 986:	a8 0f       	add	r26, r24
 988:	b9 1f       	adc	r27, r25
 98a:	30 81       	ld	r19, Z
 98c:	2c 91       	ld	r18, X
 98e:	23 27       	eor	r18, r19
 990:	21 93       	st	Z+, r18
 992:	01 96       	adiw	r24, 0x01	; 1
			^ tmp[4*i+3]
			^ t;
	}

	/* addKey */
	for(i=0; i<16; ++i){
 994:	80 31       	cpi	r24, 0x10	; 16
 996:	91 05       	cpc	r25, r1
 998:	a9 f7       	brne	.-22     	; 0x984 <aes_encrypt_core+0x14a>
		state->s[i] ^= ks->key[0].ks[i];
	}
	i=1;
	for(;rounds>1;--rounds){
		aes_enc_round(state, &(ks->key[i]));
		++i;
 99a:	e9 89       	ldd	r30, Y+17	; 0x11
 99c:	ef 5f       	subi	r30, 0xFF	; 255
 99e:	e9 8b       	std	Y+17, r30	; 0x11
	uint8_t i;
	for(i=0; i<16; ++i){
		state->s[i] ^= ks->key[0].ks[i];
	}
	i=1;
	for(;rounds>1;--rounds){
 9a0:	2a 94       	dec	r2
 9a2:	f0 e1       	ldi	r31, 0x10	; 16
 9a4:	8f 0e       	add	r8, r31
 9a6:	91 1c       	adc	r9, r1
 9a8:	7b cf       	rjmp	.-266    	; 0x8a0 <aes_encrypt_core+0x66>
		aes_enc_round(state, &(ks->key[i]));
		++i;
	}
	aes_enc_lastround(state, &(ks->key[i]));
 9aa:	d7 01       	movw	r26, r14
static
void aes_enc_lastround(aes_cipher_state_t* state,const aes_roundkey_t* k){
	uint8_t i;
	/* subBytes */
	for(i=0; i<16; ++i){
		state->s[i] = pgm_read_byte(aes_sbox+state->s[i]);
 9ac:	ec 91       	ld	r30, X
 9ae:	f0 e0       	ldi	r31, 0x00	; 0
 9b0:	ee 51       	subi	r30, 0x1E	; 30
 9b2:	fe 4f       	sbci	r31, 0xFE	; 254
 9b4:	e4 91       	lpm	r30, Z
 9b6:	ed 93       	st	X+, r30

static
void aes_enc_lastround(aes_cipher_state_t* state,const aes_roundkey_t* k){
	uint8_t i;
	/* subBytes */
	for(i=0; i<16; ++i){
 9b8:	a4 15       	cp	r26, r4
 9ba:	b5 05       	cpc	r27, r5
 9bc:	b9 f7       	brne	.-18     	; 0x9ac <aes_encrypt_core+0x172>
		state->s[i] = pgm_read_byte(aes_sbox+state->s[i]);
	}
	/* shiftRows */
	aes_shiftcol(state->s+1, 1);
 9be:	61 e0       	ldi	r22, 0x01	; 1
 9c0:	c7 01       	movw	r24, r14
 9c2:	01 96       	adiw	r24, 0x01	; 1
 9c4:	0e 94 ce 03 	call	0x79c	; 0x79c <aes_shiftcol>
	aes_shiftcol(state->s+2, 2);
 9c8:	62 e0       	ldi	r22, 0x02	; 2
 9ca:	c7 01       	movw	r24, r14
 9cc:	02 96       	adiw	r24, 0x02	; 2
 9ce:	0e 94 ce 03 	call	0x79c	; 0x79c <aes_shiftcol>
	aes_shiftcol(state->s+3, 3);
 9d2:	63 e0       	ldi	r22, 0x03	; 3
 9d4:	c7 01       	movw	r24, r14
 9d6:	03 96       	adiw	r24, 0x03	; 3
 9d8:	0e 94 ce 03 	call	0x79c	; 0x79c <aes_shiftcol>
 9dc:	a9 89       	ldd	r26, Y+17	; 0x11
 9de:	30 e1       	ldi	r19, 0x10	; 16
 9e0:	a3 9f       	mul	r26, r19
 9e2:	c0 01       	movw	r24, r0
 9e4:	11 24       	eor	r1, r1
 9e6:	20 e0       	ldi	r18, 0x00	; 0
 9e8:	30 e0       	ldi	r19, 0x00	; 0
	/* keyAdd */
	for(i=0; i<16; ++i){
		state->s[i] ^= k->ks[i];
 9ea:	fc 01       	movw	r30, r24
 9ec:	e2 0f       	add	r30, r18
 9ee:	f3 1f       	adc	r31, r19
 9f0:	ea 0d       	add	r30, r10
 9f2:	fb 1d       	adc	r31, r11
 9f4:	aa 89       	ldd	r26, Y+18	; 0x12
 9f6:	bb 89       	ldd	r27, Y+19	; 0x13
 9f8:	5c 91       	ld	r21, X
 9fa:	40 81       	ld	r20, Z
 9fc:	45 27       	eor	r20, r21
 9fe:	4d 93       	st	X+, r20
 a00:	aa 8b       	std	Y+18, r26	; 0x12
 a02:	bb 8b       	std	Y+19, r27	; 0x13
 a04:	2f 5f       	subi	r18, 0xFF	; 255
 a06:	3f 4f       	sbci	r19, 0xFF	; 255
	/* shiftRows */
	aes_shiftcol(state->s+1, 1);
	aes_shiftcol(state->s+2, 2);
	aes_shiftcol(state->s+3, 3);
	/* keyAdd */
	for(i=0; i<16; ++i){
 a08:	20 31       	cpi	r18, 0x10	; 16
 a0a:	31 05       	cpc	r19, r1
 a0c:	71 f7       	brne	.-36     	; 0x9ea <aes_encrypt_core+0x1b0>
	for(;rounds>1;--rounds){
		aes_enc_round(state, &(ks->key[i]));
		++i;
	}
	aes_enc_lastround(state, &(ks->key[i]));
}
 a0e:	63 96       	adiw	r28, 0x13	; 19
 a10:	cd bf       	out	0x3d, r28	; 61
 a12:	de bf       	out	0x3e, r29	; 62
 a14:	df 91       	pop	r29
 a16:	cf 91       	pop	r28
 a18:	1f 91       	pop	r17
 a1a:	0f 91       	pop	r16
 a1c:	ff 90       	pop	r15
 a1e:	ef 90       	pop	r14
 a20:	df 90       	pop	r13
 a22:	cf 90       	pop	r12
 a24:	bf 90       	pop	r11
 a26:	af 90       	pop	r10
 a28:	9f 90       	pop	r9
 a2a:	8f 90       	pop	r8
 a2c:	7f 90       	pop	r7
 a2e:	6f 90       	pop	r6
 a30:	5f 90       	pop	r5
 a32:	4f 90       	pop	r4
 a34:	3f 90       	pop	r3
 a36:	2f 90       	pop	r2
 a38:	08 95       	ret

00000a3a <aes_init>:

const uint8_t rc_tab[] PROGMEM = { 0x01, 0x02, 0x04, 0x08,
                             0x10, 0x20, 0x40, 0x80,
                             0x1b, 0x36 };

void aes_init(const void* key, uint16_t keysize_b, aes_genctx_t* ctx){
 a3a:	8f 92       	push	r8
 a3c:	9f 92       	push	r9
 a3e:	af 92       	push	r10
 a40:	bf 92       	push	r11
 a42:	cf 92       	push	r12
 a44:	df 92       	push	r13
 a46:	ef 92       	push	r14
 a48:	ff 92       	push	r15
 a4a:	0f 93       	push	r16
 a4c:	1f 93       	push	r17
 a4e:	cf 93       	push	r28
 a50:	df 93       	push	r29
 a52:	ea 01       	movw	r28, r20
	uint8_t rc=0;
	union {
		uint32_t v32;
		uint8_t  v8[4];
	} tmp;
	nk=keysize_b>>5; /* 4, 6, 8 */
 a54:	6b 01       	movw	r12, r22
 a56:	f5 e0       	ldi	r31, 0x05	; 5
 a58:	d6 94       	lsr	r13
 a5a:	c7 94       	ror	r12
 a5c:	fa 95       	dec	r31
 a5e:	e1 f7       	brne	.-8      	; 0xa58 <aes_init+0x1e>
 a60:	ec 2c       	mov	r14, r12
	hi=4*(nk+6+1);
 a62:	86 01       	movw	r16, r12
 a64:	11 27       	eor	r17, r17
 a66:	98 01       	movw	r18, r16
 a68:	29 5f       	subi	r18, 0xF9	; 249
 a6a:	3f 4f       	sbci	r19, 0xFF	; 255
 a6c:	f2 2e       	mov	r15, r18
 a6e:	ff 0c       	add	r15, r15
 a70:	ff 0c       	add	r15, r15
	memcpy(ctx, key, keysize_b/8);
 a72:	ab 01       	movw	r20, r22
 a74:	a3 e0       	ldi	r26, 0x03	; 3
 a76:	56 95       	lsr	r21
 a78:	47 95       	ror	r20
 a7a:	aa 95       	dec	r26
 a7c:	e1 f7       	brne	.-8      	; 0xa76 <aes_init+0x3c>
 a7e:	bc 01       	movw	r22, r24
 a80:	ce 01       	movw	r24, r28
 a82:	0e 94 04 06 	call	0xc08	; 0xc08 <memcpy>
	next_nk = nk;
 a86:	dc 2c       	mov	r13, r12
	for(i=nk;i<hi;++i){
 a88:	2c 2d       	mov	r18, r12
                             0x10, 0x20, 0x40, 0x80,
                             0x1b, 0x36 };

void aes_init(const void* key, uint16_t keysize_b, aes_genctx_t* ctx){
	uint8_t hi,i,nk, next_nk;
	uint8_t rc=0;
 a8a:	30 e0       	ldi	r19, 0x00	; 0
	} tmp;
	nk=keysize_b>>5; /* 4, 6, 8 */
	hi=4*(nk+6+1);
	memcpy(ctx, key, keysize_b/8);
	next_nk = nk;
	for(i=nk;i<hi;++i){
 a8c:	2f 15       	cp	r18, r15
 a8e:	08 f0       	brcs	.+2      	; 0xa92 <aes_init+0x58>
 a90:	6e c0       	rjmp	.+220    	; 0xb6e <aes_init+0x134>
		tmp.v32 = ((uint32_t*)(ctx->key[0].ks))[i-1];
 a92:	62 2f       	mov	r22, r18
 a94:	70 e0       	ldi	r23, 0x00	; 0
 a96:	ab 01       	movw	r20, r22
 a98:	41 50       	subi	r20, 0x01	; 1
 a9a:	50 4c       	sbci	r21, 0xC0	; 192
 a9c:	44 0f       	add	r20, r20
 a9e:	55 1f       	adc	r21, r21
 aa0:	44 0f       	add	r20, r20
 aa2:	55 1f       	adc	r21, r21
 aa4:	4c 0f       	add	r20, r28
 aa6:	5d 1f       	adc	r21, r29
 aa8:	fa 01       	movw	r30, r20
 aaa:	80 81       	ld	r24, Z
 aac:	91 81       	ldd	r25, Z+1	; 0x01
 aae:	a2 81       	ldd	r26, Z+2	; 0x02
 ab0:	b3 81       	ldd	r27, Z+3	; 0x03
		if(i!=next_nk){
 ab2:	2d 15       	cp	r18, r13
 ab4:	09 f1       	breq	.+66     	; 0xaf8 <aes_init+0xbe>
			if(nk==8 && i%8==4){
 ab6:	f8 e0       	ldi	r31, 0x08	; 8
 ab8:	ef 12       	cpse	r14, r31
 aba:	41 c0       	rjmp	.+130    	; 0xb3e <aes_init+0x104>
 abc:	e2 2f       	mov	r30, r18
 abe:	e7 70       	andi	r30, 0x07	; 7
 ac0:	e4 30       	cpi	r30, 0x04	; 4
 ac2:	09 f0       	breq	.+2      	; 0xac6 <aes_init+0x8c>
 ac4:	3c c0       	rjmp	.+120    	; 0xb3e <aes_init+0x104>
				tmp.v8[0] = pgm_read_byte(aes_sbox+tmp.v8[0]);
 ac6:	e8 2f       	mov	r30, r24
 ac8:	f0 e0       	ldi	r31, 0x00	; 0
 aca:	ee 51       	subi	r30, 0x1E	; 30
 acc:	fe 4f       	sbci	r31, 0xFE	; 254
 ace:	e4 91       	lpm	r30, Z
 ad0:	8e 2f       	mov	r24, r30
				tmp.v8[1] = pgm_read_byte(aes_sbox+tmp.v8[1]);
 ad2:	e9 2f       	mov	r30, r25
 ad4:	f0 e0       	ldi	r31, 0x00	; 0
 ad6:	ee 51       	subi	r30, 0x1E	; 30
 ad8:	fe 4f       	sbci	r31, 0xFE	; 254
 ada:	e4 91       	lpm	r30, Z
 adc:	9e 2f       	mov	r25, r30
				tmp.v8[2] = pgm_read_byte(aes_sbox+tmp.v8[2]);
 ade:	ea 2f       	mov	r30, r26
 ae0:	f0 e0       	ldi	r31, 0x00	; 0
 ae2:	ee 51       	subi	r30, 0x1E	; 30
 ae4:	fe 4f       	sbci	r31, 0xFE	; 254
 ae6:	e4 91       	lpm	r30, Z
 ae8:	ae 2f       	mov	r26, r30
				tmp.v8[3] = pgm_read_byte(aes_sbox+tmp.v8[3]);
 aea:	eb 2f       	mov	r30, r27
 aec:	f0 e0       	ldi	r31, 0x00	; 0
 aee:	ee 51       	subi	r30, 0x1E	; 30
 af0:	fe 4f       	sbci	r31, 0xFE	; 254
 af2:	e4 91       	lpm	r30, Z
 af4:	be 2f       	mov	r27, r30
 af6:	23 c0       	rjmp	.+70     	; 0xb3e <aes_init+0x104>
			}
		} else {
			next_nk += nk;
 af8:	d2 2e       	mov	r13, r18
 afa:	de 0c       	add	r13, r14
#include <avr/pgmspace.h>

static
void aes_rotword(void* a){
	uint8_t t;
	t=((uint8_t*)a)[0];
 afc:	c8 2e       	mov	r12, r24
	((uint8_t*)a)[0] = ((uint8_t*)a)[1];
	((uint8_t*)a)[1] = ((uint8_t*)a)[2];
	((uint8_t*)a)[2] = ((uint8_t*)a)[3];
 afe:	ab 2e       	mov	r10, r27
				tmp.v8[3] = pgm_read_byte(aes_sbox+tmp.v8[3]);
			}
		} else {
			next_nk += nk;
			aes_rotword(&(tmp.v32));
			tmp.v8[0] = pgm_read_byte(aes_sbox+tmp.v8[0]);
 b00:	e9 2f       	mov	r30, r25
 b02:	f0 e0       	ldi	r31, 0x00	; 0
 b04:	ee 51       	subi	r30, 0x1E	; 30
 b06:	fe 4f       	sbci	r31, 0xFE	; 254
 b08:	b4 90       	lpm	r11, Z
			tmp.v8[1] = pgm_read_byte(aes_sbox+tmp.v8[1]);
 b0a:	ea 2f       	mov	r30, r26
 b0c:	f0 e0       	ldi	r31, 0x00	; 0
 b0e:	ee 51       	subi	r30, 0x1E	; 30
 b10:	fe 4f       	sbci	r31, 0xFE	; 254
 b12:	e4 91       	lpm	r30, Z
 b14:	9e 2f       	mov	r25, r30
			tmp.v8[2] = pgm_read_byte(aes_sbox+tmp.v8[2]);
 b16:	ea 2d       	mov	r30, r10
 b18:	f0 e0       	ldi	r31, 0x00	; 0
 b1a:	ee 51       	subi	r30, 0x1E	; 30
 b1c:	fe 4f       	sbci	r31, 0xFE	; 254
 b1e:	e4 91       	lpm	r30, Z
 b20:	ae 2f       	mov	r26, r30
			tmp.v8[3] = pgm_read_byte(aes_sbox+tmp.v8[3]);
 b22:	ec 2d       	mov	r30, r12
 b24:	f0 e0       	ldi	r31, 0x00	; 0
 b26:	ee 51       	subi	r30, 0x1E	; 30
 b28:	fe 4f       	sbci	r31, 0xFE	; 254
 b2a:	e4 91       	lpm	r30, Z
 b2c:	be 2f       	mov	r27, r30
			tmp.v8[0] ^= pgm_read_byte(rc_tab+rc);
 b2e:	e3 2f       	mov	r30, r19
 b30:	f0 e0       	ldi	r31, 0x00	; 0
 b32:	e8 52       	subi	r30, 0x28	; 40
 b34:	fe 4f       	sbci	r31, 0xFE	; 254
 b36:	e4 91       	lpm	r30, Z
 b38:	8b 2d       	mov	r24, r11
 b3a:	8e 27       	eor	r24, r30
			rc++;
 b3c:	3f 5f       	subi	r19, 0xFF	; 255
		}
		((uint32_t*)(ctx->key[0].ks))[i] = ((uint32_t*)(ctx->key[0].ks))[i-nk]
 b3e:	fb 01       	movw	r30, r22
 b40:	e0 1b       	sub	r30, r16
 b42:	f1 0b       	sbc	r31, r17
 b44:	ee 0f       	add	r30, r30
 b46:	ff 1f       	adc	r31, r31
 b48:	ee 0f       	add	r30, r30
 b4a:	ff 1f       	adc	r31, r31
 b4c:	ec 0f       	add	r30, r28
 b4e:	fd 1f       	adc	r31, r29
 b50:	80 80       	ld	r8, Z
 b52:	91 80       	ldd	r9, Z+1	; 0x01
 b54:	a2 80       	ldd	r10, Z+2	; 0x02
 b56:	b3 80       	ldd	r11, Z+3	; 0x03
 b58:	88 25       	eor	r24, r8
 b5a:	99 25       	eor	r25, r9
 b5c:	aa 25       	eor	r26, r10
 b5e:	bb 25       	eor	r27, r11
 b60:	fa 01       	movw	r30, r20
 b62:	84 83       	std	Z+4, r24	; 0x04
 b64:	95 83       	std	Z+5, r25	; 0x05
 b66:	a6 83       	std	Z+6, r26	; 0x06
 b68:	b7 83       	std	Z+7, r27	; 0x07
	} tmp;
	nk=keysize_b>>5; /* 4, 6, 8 */
	hi=4*(nk+6+1);
	memcpy(ctx, key, keysize_b/8);
	next_nk = nk;
	for(i=nk;i<hi;++i){
 b6a:	2f 5f       	subi	r18, 0xFF	; 255
 b6c:	8f cf       	rjmp	.-226    	; 0xa8c <aes_init+0x52>
			rc++;
		}
		((uint32_t*)(ctx->key[0].ks))[i] = ((uint32_t*)(ctx->key[0].ks))[i-nk]
		                                   ^ tmp.v32;
	}
}
 b6e:	df 91       	pop	r29
 b70:	cf 91       	pop	r28
 b72:	1f 91       	pop	r17
 b74:	0f 91       	pop	r16
 b76:	ff 90       	pop	r15
 b78:	ef 90       	pop	r14
 b7a:	df 90       	pop	r13
 b7c:	cf 90       	pop	r12
 b7e:	bf 90       	pop	r11
 b80:	af 90       	pop	r10
 b82:	9f 90       	pop	r9
 b84:	8f 90       	pop	r8
 b86:	08 95       	ret

00000b88 <aes128_init>:

void aes128_init(const void* key, aes128_ctx_t* ctx){
 b88:	ab 01       	movw	r20, r22
	aes_init(key, 128, (aes_genctx_t*)ctx);
 b8a:	60 e8       	ldi	r22, 0x80	; 128
 b8c:	70 e0       	ldi	r23, 0x00	; 0
 b8e:	0c 94 1d 05 	jmp	0xa3a	; 0xa3a <aes_init>

00000b92 <aes192_init>:
}

void aes192_init(const void* key, aes192_ctx_t* ctx){
 b92:	ab 01       	movw	r20, r22
	aes_init(key, 192, (aes_genctx_t*)ctx);
 b94:	60 ec       	ldi	r22, 0xC0	; 192
 b96:	70 e0       	ldi	r23, 0x00	; 0
 b98:	0c 94 1d 05 	jmp	0xa3a	; 0xa3a <aes_init>

00000b9c <aes256_init>:
}

void aes256_init(const void* key, aes256_ctx_t* ctx){
 b9c:	ab 01       	movw	r20, r22
	aes_init(key, 256, (aes_genctx_t*)ctx);
 b9e:	60 e0       	ldi	r22, 0x00	; 0
 ba0:	71 e0       	ldi	r23, 0x01	; 1
 ba2:	0c 94 1d 05 	jmp	0xa3a	; 0xa3a <aes_init>

00000ba6 <aes128_enc>:

#include "aes.h"
#include "aes_enc.h"

void aes128_enc(void* buffer, aes128_ctx_t* ctx){
	aes_encrypt_core(buffer, (aes_genctx_t*)ctx, 10);
 ba6:	4a e0       	ldi	r20, 0x0A	; 10
 ba8:	0c 94 1d 04 	jmp	0x83a	; 0x83a <aes_encrypt_core>

00000bac <gf256mul>:
P = 24
.global gf256mul

#ifdef OPTIMIZE_SMALL_A
gf256mul:
	mov A, r24
 bac:	78 2f       	mov	r23, r24
	clr r24
 bae:	88 27       	eor	r24, r24
1:	
	lsr A
 bb0:	76 95       	lsr	r23
	breq 4f
 bb2:	31 f0       	breq	.+12     	; 0xbc0 <gf256mul+0x14>
	brcc 2f
 bb4:	08 f4       	brcc	.+2      	; 0xbb8 <gf256mul+0xc>
	eor P, B
 bb6:	86 27       	eor	r24, r22
2:
	lsl B
 bb8:	66 0f       	add	r22, r22
	brcc 3f
 bba:	08 f4       	brcc	.+2      	; 0xbbe <gf256mul+0x12>
	eor B, r20	
 bbc:	64 27       	eor	r22, r20
3:
	rjmp 1b
 bbe:	f8 cf       	rjmp	.-16     	; 0xbb0 <gf256mul+0x4>
4:
	brcc 2f
 bc0:	08 f4       	brcc	.+2      	; 0xbc4 <gf256mul+0x18>
	eor P, B
 bc2:	86 27       	eor	r24, r22
2:
	ret
 bc4:	08 95       	ret

00000bc6 <main>:
	return 0x00;
}

int main(void)
{
    platform_init();
 bc6:	0e 94 a9 03 	call	0x752	; 0x752 <platform_init>
	init_uart();	
 bca:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <init_uart0>
	trigger_setup();
 bce:	81 e0       	ldi	r24, 0x01	; 1
 bd0:	80 93 01 06 	sts	0x0601, r24	; 0x800601 <__TEXT_REGION_LENGTH__+0x700601>
	putch('l');
	putch('o');
	putch('\n');
	*/
		
	simpleserial_init();		
 bd4:	0e 94 0f 02 	call	0x41e	; 0x41e <simpleserial_init>
	simpleserial_addcmd('k', 16, get_key);
 bd8:	43 ea       	ldi	r20, 0xA3	; 163
 bda:	51 e0       	ldi	r21, 0x01	; 1
 bdc:	60 e1       	ldi	r22, 0x10	; 16
 bde:	70 e0       	ldi	r23, 0x00	; 0
 be0:	8b e6       	ldi	r24, 0x6B	; 107
 be2:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <simpleserial_addcmd>
	simpleserial_addcmd('p', 16, get_pt);
 be6:	46 e9       	ldi	r20, 0x96	; 150
 be8:	51 e0       	ldi	r21, 0x01	; 1
 bea:	60 e1       	ldi	r22, 0x10	; 16
 bec:	70 e0       	ldi	r23, 0x00	; 0
 bee:	80 e7       	ldi	r24, 0x70	; 112
 bf0:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <simpleserial_addcmd>
	simpleserial_addcmd('x', 0, reset);
 bf4:	44 e9       	ldi	r20, 0x94	; 148
 bf6:	51 e0       	ldi	r21, 0x01	; 1
 bf8:	60 e0       	ldi	r22, 0x00	; 0
 bfa:	70 e0       	ldi	r23, 0x00	; 0
 bfc:	88 e7       	ldi	r24, 0x78	; 120
 bfe:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <simpleserial_addcmd>
	while(1)
		simpleserial_get();
 c02:	0e 94 4a 02 	call	0x494	; 0x494 <simpleserial_get>
 c06:	fd cf       	rjmp	.-6      	; 0xc02 <main+0x3c>

00000c08 <memcpy>:
 c08:	fb 01       	movw	r30, r22
 c0a:	dc 01       	movw	r26, r24
 c0c:	02 c0       	rjmp	.+4      	; 0xc12 <memcpy+0xa>
 c0e:	01 90       	ld	r0, Z+
 c10:	0d 92       	st	X+, r0
 c12:	41 50       	subi	r20, 0x01	; 1
 c14:	50 40       	sbci	r21, 0x00	; 0
 c16:	d8 f7       	brcc	.-10     	; 0xc0e <memcpy+0x6>
 c18:	08 95       	ret

00000c1a <_exit>:
 c1a:	f8 94       	cli

00000c1c <__stop_program>:
 c1c:	ff cf       	rjmp	.-2      	; 0xc1c <__stop_program>
