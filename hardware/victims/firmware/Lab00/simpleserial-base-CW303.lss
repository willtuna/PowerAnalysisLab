
simpleserial-base-CW303.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c36  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00802000  00000c36  00000cca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000e4  00802010  00802010  00000cda  2**0
                  ALLOC
  3 .stab         000000c0  00000000  00000000  00000cdc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000003f  00000000  00000000  00000d9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00000ddb  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000dec  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 00000140  00000000  00000000  00000e2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   000043d7  00000000  00000000  00000f6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00002cad  00000000  00000000  00005343  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00000cc3  00000000  00000000  00007ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  0000046c  00000000  00000000  00008cb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000207e  00000000  00000000  00009120  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00001188  00000000  00000000  0000b19e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000018  00000000  00000000  0000c326  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__ctors_end>
   4:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
   8:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
   c:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  10:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  14:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  18:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  1c:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  20:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  24:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  28:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  2c:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  30:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  34:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  38:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  3c:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  40:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  44:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  48:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  4c:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  50:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  54:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  58:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  5c:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  60:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  64:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  68:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  6c:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  70:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  74:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  78:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  7c:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  80:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  84:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  88:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  8c:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  90:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  94:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  98:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  9c:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  a0:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  a4:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  a8:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  ac:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  b0:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  b4:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  b8:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  bc:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  c0:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  c4:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  c8:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  cc:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  d0:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  d4:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  d8:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  dc:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  e0:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  e4:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  e8:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  ec:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  f0:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  f4:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  f8:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
  fc:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
 100:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
 104:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
 108:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
 10c:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
 110:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
 114:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
 118:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
 11c:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
 120:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
 124:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
 128:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
 12c:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
 130:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
 134:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
 138:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
 13c:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
 140:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
 144:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
 148:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
 14c:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
 150:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
 154:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
 158:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
 15c:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
 160:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
 164:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
 168:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
 16c:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
 170:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
 174:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
 178:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
 17c:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
 180:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
 184:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
 188:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
 18c:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
 190:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
 194:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
 198:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
 19c:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
 1a0:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
 1a4:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
 1a8:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
 1ac:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
 1b0:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
 1b4:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
 1b8:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
 1bc:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
 1c0:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
 1c4:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>

000001c8 <__trampolines_start>:
 1c8:	0c 94 b1 01 	jmp	0x362	; 0x362 <check_version>
 1cc:	0c 94 94 01 	jmp	0x328	; 0x328 <reset>
 1d0:	0c 94 af 01 	jmp	0x35e	; 0x35e <get_key>
 1d4:	0c 94 96 01 	jmp	0x32c	; 0x32c <get_pt>

000001d8 <__trampolines_end>:
 1d8:	01 02       	muls	r16, r17
 1da:	04 08       	sbc	r0, r4
 1dc:	10 20       	and	r1, r0
 1de:	40 80       	ld	r4, Z
 1e0:	1b 36       	cpi	r17, 0x6B	; 107

000001e2 <aes_sbox>:
 1e2:	63 7c 77 7b f2 6b 6f c5 30 01 67 2b fe d7 ab 76     c|w{.ko.0.g+...v
 1f2:	ca 82 c9 7d fa 59 47 f0 ad d4 a2 af 9c a4 72 c0     ...}.YG.......r.
 202:	b7 fd 93 26 36 3f f7 cc 34 a5 e5 f1 71 d8 31 15     ...&6?..4...q.1.
 212:	04 c7 23 c3 18 96 05 9a 07 12 80 e2 eb 27 b2 75     ..#..........'.u
 222:	09 83 2c 1a 1b 6e 5a a0 52 3b d6 b3 29 e3 2f 84     ..,..nZ.R;..)./.
 232:	53 d1 00 ed 20 fc b1 5b 6a cb be 39 4a 4c 58 cf     S... ..[j..9JLX.
 242:	d0 ef aa fb 43 4d 33 85 45 f9 02 7f 50 3c 9f a8     ....CM3.E...P<..
 252:	51 a3 40 8f 92 9d 38 f5 bc b6 da 21 10 ff f3 d2     Q.@...8....!....
 262:	cd 0c 13 ec 5f 97 44 17 c4 a7 7e 3d 64 5d 19 73     ...._.D...~=d].s
 272:	60 81 4f dc 22 2a 90 88 46 ee b8 14 de 5e 0b db     `.O."*..F....^..
 282:	e0 32 3a 0a 49 06 24 5c c2 d3 ac 62 91 95 e4 79     .2:.I.$\...b...y
 292:	e7 c8 37 6d 8d d5 4e a9 6c 56 f4 ea 65 7a ae 08     ..7m..N.lV..ez..
 2a2:	ba 78 25 2e 1c a6 b4 c6 e8 dd 74 1f 4b bd 8b 8a     .x%.......t.K...
 2b2:	70 3e b5 66 48 03 f6 0e 61 35 57 b9 86 c1 1d 9e     p>.fH...a5W.....
 2c2:	e1 f8 98 11 69 d9 8e 94 9b 1e 87 e9 ce 55 28 df     ....i........U(.
 2d2:	8c a1 89 0d bf e6 42 68 41 99 2d 0f b0 54 bb 16     ......BhA.-..T..

000002e2 <__ctors_end>:
 2e2:	11 24       	eor	r1, r1
 2e4:	1f be       	out	0x3f, r1	; 63
 2e6:	cf ef       	ldi	r28, 0xFF	; 255
 2e8:	cd bf       	out	0x3d, r28	; 61
 2ea:	df e3       	ldi	r29, 0x3F	; 63
 2ec:	de bf       	out	0x3e, r29	; 62
 2ee:	00 e0       	ldi	r16, 0x00	; 0
 2f0:	0c bf       	out	0x3c, r16	; 60

000002f2 <__do_copy_data>:
 2f2:	10 e2       	ldi	r17, 0x20	; 32
 2f4:	a0 e0       	ldi	r26, 0x00	; 0
 2f6:	b0 e2       	ldi	r27, 0x20	; 32
 2f8:	e6 e3       	ldi	r30, 0x36	; 54
 2fa:	fc e0       	ldi	r31, 0x0C	; 12
 2fc:	00 e0       	ldi	r16, 0x00	; 0
 2fe:	0b bf       	out	0x3b, r16	; 59
 300:	02 c0       	rjmp	.+4      	; 0x306 <__do_copy_data+0x14>
 302:	07 90       	elpm	r0, Z+
 304:	0d 92       	st	X+, r0
 306:	a0 31       	cpi	r26, 0x10	; 16
 308:	b1 07       	cpc	r27, r17
 30a:	d9 f7       	brne	.-10     	; 0x302 <__do_copy_data+0x10>

0000030c <__do_clear_bss>:
 30c:	20 e2       	ldi	r18, 0x20	; 32
 30e:	a0 e1       	ldi	r26, 0x10	; 16
 310:	b0 e2       	ldi	r27, 0x20	; 32
 312:	01 c0       	rjmp	.+2      	; 0x316 <.do_clear_bss_start>

00000314 <.do_clear_bss_loop>:
 314:	1d 92       	st	X+, r1

00000316 <.do_clear_bss_start>:
 316:	a4 3f       	cpi	r26, 0xF4	; 244
 318:	b2 07       	cpc	r27, r18
 31a:	e1 f7       	brne	.-8      	; 0x314 <.do_clear_bss_loop>
 31c:	0e 94 ef 05 	call	0xbde	; 0xbde <main>
 320:	0c 94 19 06 	jmp	0xc32	; 0xc32 <_exit>

00000324 <__bad_interrupt>:
 324:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000328 <reset>:

uint8_t reset(uint8_t* x)
{
	// Reset key here if needed
	return 0x00;
}
 328:	80 e0       	ldi	r24, 0x00	; 0
 32a:	08 95       	ret

0000032c <get_pt>:
	// Load key here
	return 0x00;
}

uint8_t get_pt(uint8_t* pt)
{
 32c:	ac 01       	movw	r20, r24
	/**********************************
	* Start user-specific code here. */
	trigger_high();
 32e:	e0 e0       	ldi	r30, 0x00	; 0
 330:	f6 e0       	ldi	r31, 0x06	; 6
 332:	91 e0       	ldi	r25, 0x01	; 1
 334:	95 83       	std	Z+5, r25	; 0x05
	"nop"  "\n\t"
	::
	);
	*/
	
	asm volatile(
 336:	01 9c       	mul	r0, r1
 338:	01 9c       	mul	r0, r1
 33a:	01 9c       	mul	r0, r1
 33c:	01 9c       	mul	r0, r1
 33e:	01 9c       	mul	r0, r1
 340:	01 9c       	mul	r0, r1
 342:	01 9c       	mul	r0, r1
 344:	01 9c       	mul	r0, r1
 346:	01 9c       	mul	r0, r1
 348:	01 9c       	mul	r0, r1
 34a:	01 9c       	mul	r0, r1
 34c:	01 9c       	mul	r0, r1
	"mul r0,r1"  "\n\t"
	"mul r0,r1"  "\n\t"
	"mul r0,r1"  "\n\t"
	::
	);
	trigger_low();
 34e:	96 83       	std	Z+6, r25	; 0x06
	/* End user-specific code here. *
	********************************/
	simpleserial_put('r', 16, pt);
 350:	60 e1       	ldi	r22, 0x10	; 16
 352:	70 e0       	ldi	r23, 0x00	; 0
 354:	82 e7       	ldi	r24, 0x72	; 114
 356:	0e 94 22 02 	call	0x444	; 0x444 <simpleserial_put>
	return 0x00;
}
 35a:	80 e0       	ldi	r24, 0x00	; 0
 35c:	08 95       	ret

0000035e <get_key>:
 35e:	80 e0       	ldi	r24, 0x00	; 0
 360:	08 95       	ret

00000362 <check_version>:
// Callback function for "v" command.
// This can exist in v1.0 as long as we don't actually send back an ack ("z")
uint8_t check_version(uint8_t* v)
{
	return 0x00;
}
 362:	80 e0       	ldi	r24, 0x00	; 0
 364:	08 95       	ret

00000366 <hex_decode>:
	'0', '1', '2', '3', '4', '5', '6', '7',
	'8', '9', 'A', 'B', 'C', 'D', 'E', 'F'
};

int hex_decode(int len, char* ascii_buf, uint8_t* data_buf)
{
 366:	db 01       	movw	r26, r22
	for(int i = 0; i < len; i++)
 368:	fa 01       	movw	r30, r20
 36a:	9f 01       	movw	r18, r30
 36c:	24 1b       	sub	r18, r20
 36e:	35 0b       	sbc	r19, r21
 370:	28 17       	cp	r18, r24
 372:	39 07       	cpc	r19, r25
 374:	d4 f5       	brge	.+116    	; 0x3ea <hex_decode+0x84>
	{
		char n_hi = ascii_buf[2*i];
 376:	2c 91       	ld	r18, X
		char n_lo = ascii_buf[2*i+1];
 378:	11 96       	adiw	r26, 0x01	; 1
 37a:	3c 91       	ld	r19, X
 37c:	11 97       	sbiw	r26, 0x01	; 1

		if(n_lo >= '0' && n_lo <= '9')
 37e:	60 ed       	ldi	r22, 0xD0	; 208
 380:	63 0f       	add	r22, r19
 382:	6a 30       	cpi	r22, 0x0A	; 10
 384:	10 f4       	brcc	.+4      	; 0x38a <hex_decode+0x24>
			data_buf[i] = n_lo - '0';
 386:	60 83       	st	Z, r22
 388:	0f c0       	rjmp	.+30     	; 0x3a8 <hex_decode+0x42>
		else if(n_lo >= 'A' && n_lo <= 'F')
 38a:	6f eb       	ldi	r22, 0xBF	; 191
 38c:	63 0f       	add	r22, r19
 38e:	66 30       	cpi	r22, 0x06	; 6
 390:	10 f4       	brcc	.+4      	; 0x396 <hex_decode+0x30>
			data_buf[i] = n_lo - 'A' + 10;
 392:	37 53       	subi	r19, 0x37	; 55
 394:	08 c0       	rjmp	.+16     	; 0x3a6 <hex_decode+0x40>
		else if(n_lo >= 'a' && n_lo <= 'f')
 396:	6f e9       	ldi	r22, 0x9F	; 159
 398:	63 0f       	add	r22, r19
 39a:	66 30       	cpi	r22, 0x06	; 6
 39c:	18 f0       	brcs	.+6      	; 0x3a4 <hex_decode+0x3e>
			data_buf[i] = n_lo - 'a' + 10;
		else
			return 1;
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	08 95       	ret
		if(n_lo >= '0' && n_lo <= '9')
			data_buf[i] = n_lo - '0';
		else if(n_lo >= 'A' && n_lo <= 'F')
			data_buf[i] = n_lo - 'A' + 10;
		else if(n_lo >= 'a' && n_lo <= 'f')
			data_buf[i] = n_lo - 'a' + 10;
 3a4:	37 55       	subi	r19, 0x57	; 87
 3a6:	30 83       	st	Z, r19
		else
			return 1;

		if(n_hi >= '0' && n_hi <= '9')
 3a8:	30 ed       	ldi	r19, 0xD0	; 208
 3aa:	32 0f       	add	r19, r18
 3ac:	3a 30       	cpi	r19, 0x0A	; 10
 3ae:	18 f4       	brcc	.+6      	; 0x3b6 <hex_decode+0x50>
			data_buf[i] |= (n_hi - '0') << 4;
 3b0:	22 95       	swap	r18
 3b2:	20 7f       	andi	r18, 0xF0	; 240
 3b4:	14 c0       	rjmp	.+40     	; 0x3de <hex_decode+0x78>
		else if(n_hi >= 'A' && n_hi <= 'F')
 3b6:	3f eb       	ldi	r19, 0xBF	; 191
 3b8:	32 0f       	add	r19, r18
 3ba:	36 30       	cpi	r19, 0x06	; 6
 3bc:	20 f4       	brcc	.+8      	; 0x3c6 <hex_decode+0x60>
			data_buf[i] |= (n_hi - 'A' + 10) << 4;
 3be:	30 e0       	ldi	r19, 0x00	; 0
 3c0:	27 53       	subi	r18, 0x37	; 55
 3c2:	31 09       	sbc	r19, r1
 3c4:	07 c0       	rjmp	.+14     	; 0x3d4 <hex_decode+0x6e>
		else if(n_hi >= 'a' && n_hi <= 'f')
 3c6:	3f e9       	ldi	r19, 0x9F	; 159
 3c8:	32 0f       	add	r19, r18
 3ca:	36 30       	cpi	r19, 0x06	; 6
 3cc:	40 f7       	brcc	.-48     	; 0x39e <hex_decode+0x38>
			data_buf[i] |= (n_hi - 'a' + 10) << 4;
 3ce:	30 e0       	ldi	r19, 0x00	; 0
 3d0:	27 55       	subi	r18, 0x57	; 87
 3d2:	31 09       	sbc	r19, r1
 3d4:	64 e0       	ldi	r22, 0x04	; 4
 3d6:	22 0f       	add	r18, r18
 3d8:	33 1f       	adc	r19, r19
 3da:	6a 95       	dec	r22
 3dc:	e1 f7       	brne	.-8      	; 0x3d6 <hex_decode+0x70>
 3de:	30 81       	ld	r19, Z
 3e0:	23 2b       	or	r18, r19
 3e2:	20 83       	st	Z, r18
 3e4:	31 96       	adiw	r30, 0x01	; 1
 3e6:	12 96       	adiw	r26, 0x02	; 2
 3e8:	c0 cf       	rjmp	.-128    	; 0x36a <hex_decode+0x4>
		else
			return 1;
	}

	return 0;
 3ea:	80 e0       	ldi	r24, 0x00	; 0
 3ec:	90 e0       	ldi	r25, 0x00	; 0
}
 3ee:	08 95       	ret

000003f0 <simpleserial_addcmd>:
	simpleserial_addcmd('v', 0, check_version);
}

int simpleserial_addcmd(char c, unsigned int len, uint8_t (*fp)(uint8_t*))
{
	if(num_commands >= MAX_SS_CMDS)
 3f0:	20 91 10 20 	lds	r18, 0x2010	; 0x802010 <__data_end>
 3f4:	30 91 11 20 	lds	r19, 0x2011	; 0x802011 <__data_end+0x1>
 3f8:	2a 30       	cpi	r18, 0x0A	; 10
 3fa:	31 05       	cpc	r19, r1
 3fc:	cc f4       	brge	.+50     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
		return 1;

	if(len >= MAX_SS_LEN)
 3fe:	60 34       	cpi	r22, 0x40	; 64
 400:	71 05       	cpc	r23, r1
 402:	b0 f4       	brcc	.+44     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
		return 1;

	commands[num_commands].c   = c;
 404:	95 e0       	ldi	r25, 0x05	; 5
 406:	92 9f       	mul	r25, r18
 408:	f0 01       	movw	r30, r0
 40a:	93 9f       	mul	r25, r19
 40c:	f0 0d       	add	r31, r0
 40e:	11 24       	eor	r1, r1
 410:	ee 5e       	subi	r30, 0xEE	; 238
 412:	ff 4d       	sbci	r31, 0xDF	; 223
 414:	80 83       	st	Z, r24
	commands[num_commands].len = len;
 416:	61 83       	std	Z+1, r22	; 0x01
 418:	72 83       	std	Z+2, r23	; 0x02
	commands[num_commands].fp  = fp;
 41a:	43 83       	std	Z+3, r20	; 0x03
 41c:	54 83       	std	Z+4, r21	; 0x04
	num_commands++;
 41e:	2f 5f       	subi	r18, 0xFF	; 255
 420:	3f 4f       	sbci	r19, 0xFF	; 255
 422:	20 93 10 20 	sts	0x2010, r18	; 0x802010 <__data_end>
 426:	30 93 11 20 	sts	0x2011, r19	; 0x802011 <__data_end+0x1>

	return 0;
 42a:	80 e0       	ldi	r24, 0x00	; 0
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	08 95       	ret
}

int simpleserial_addcmd(char c, unsigned int len, uint8_t (*fp)(uint8_t*))
{
	if(num_commands >= MAX_SS_CMDS)
		return 1;
 430:	81 e0       	ldi	r24, 0x01	; 1
 432:	90 e0       	ldi	r25, 0x00	; 0
	commands[num_commands].len = len;
	commands[num_commands].fp  = fp;
	num_commands++;

	return 0;
}
 434:	08 95       	ret

00000436 <simpleserial_init>:

// Set up the SimpleSerial module by preparing internal commands
// This just adds the "v" command for now...
void simpleserial_init()
{
	simpleserial_addcmd('v', 0, check_version);
 436:	41 eb       	ldi	r20, 0xB1	; 177
 438:	51 e0       	ldi	r21, 0x01	; 1
 43a:	60 e0       	ldi	r22, 0x00	; 0
 43c:	70 e0       	ldi	r23, 0x00	; 0
 43e:	86 e7       	ldi	r24, 0x76	; 118
 440:	0c 94 f8 01 	jmp	0x3f0	; 0x3f0 <simpleserial_addcmd>

00000444 <simpleserial_put>:
	simpleserial_put('z', 1, ret);
#endif
}

void simpleserial_put(char c, int size, uint8_t* output)
{
 444:	cf 92       	push	r12
 446:	df 92       	push	r13
 448:	ef 92       	push	r14
 44a:	ff 92       	push	r15
 44c:	0f 93       	push	r16
 44e:	1f 93       	push	r17
 450:	cf 93       	push	r28
 452:	df 93       	push	r29
 454:	8b 01       	movw	r16, r22
 456:	ea 01       	movw	r28, r20
	// Write first character
	putch(c);
 458:	0e 94 21 03 	call	0x642	; 0x642 <output_ch_0>

	// Write each byte as two nibbles
	for(int i = 0; i < size; i++)
 45c:	7e 01       	movw	r14, r28
 45e:	c7 01       	movw	r24, r14
 460:	8c 1b       	sub	r24, r28
 462:	9d 0b       	sbc	r25, r29
 464:	80 17       	cp	r24, r16
 466:	91 07       	cpc	r25, r17
 468:	b4 f4       	brge	.+44     	; 0x496 <simpleserial_put+0x52>
 46a:	67 01       	movw	r12, r14
	{
		putch(hex_lookup[output[i] >> 4 ]);
 46c:	d7 01       	movw	r26, r14
 46e:	ed 91       	ld	r30, X+
 470:	7d 01       	movw	r14, r26
 472:	e2 95       	swap	r30
 474:	ef 70       	andi	r30, 0x0F	; 15
 476:	f0 e0       	ldi	r31, 0x00	; 0
 478:	e0 50       	subi	r30, 0x00	; 0
 47a:	f0 4e       	sbci	r31, 0xE0	; 224
 47c:	80 81       	ld	r24, Z
 47e:	0e 94 21 03 	call	0x642	; 0x642 <output_ch_0>
		putch(hex_lookup[output[i] & 0xF]);
 482:	d6 01       	movw	r26, r12
 484:	ec 91       	ld	r30, X
 486:	ef 70       	andi	r30, 0x0F	; 15
 488:	f0 e0       	ldi	r31, 0x00	; 0
 48a:	e0 50       	subi	r30, 0x00	; 0
 48c:	f0 4e       	sbci	r31, 0xE0	; 224
 48e:	80 81       	ld	r24, Z
 490:	0e 94 21 03 	call	0x642	; 0x642 <output_ch_0>
 494:	e4 cf       	rjmp	.-56     	; 0x45e <simpleserial_put+0x1a>
	}

	// Write trailing '\n'
	putch('\n');
 496:	8a e0       	ldi	r24, 0x0A	; 10
}
 498:	df 91       	pop	r29
 49a:	cf 91       	pop	r28
 49c:	1f 91       	pop	r17
 49e:	0f 91       	pop	r16
 4a0:	ff 90       	pop	r15
 4a2:	ef 90       	pop	r14
 4a4:	df 90       	pop	r13
 4a6:	cf 90       	pop	r12
		putch(hex_lookup[output[i] >> 4 ]);
		putch(hex_lookup[output[i] & 0xF]);
	}

	// Write trailing '\n'
	putch('\n');
 4a8:	0c 94 21 03 	jmp	0x642	; 0x642 <output_ch_0>

000004ac <simpleserial_get>:

	return 0;
}

void simpleserial_get(void)
{
 4ac:	af 92       	push	r10
 4ae:	bf 92       	push	r11
 4b0:	cf 92       	push	r12
 4b2:	df 92       	push	r13
 4b4:	ef 92       	push	r14
 4b6:	ff 92       	push	r15
 4b8:	0f 93       	push	r16
 4ba:	1f 93       	push	r17
 4bc:	cf 93       	push	r28
 4be:	df 93       	push	r29
 4c0:	cd b7       	in	r28, 0x3d	; 61
 4c2:	de b7       	in	r29, 0x3e	; 62
 4c4:	c1 5c       	subi	r28, 0xC1	; 193
 4c6:	d1 09       	sbc	r29, r1
 4c8:	cd bf       	out	0x3d, r28	; 61
 4ca:	de bf       	out	0x3e, r29	; 62
	char ascii_buf[2*MAX_SS_LEN];
	uint8_t data_buf[MAX_SS_LEN];
	char c;

	// Find which command we're receiving
	c = getch();
 4cc:	0e 94 1a 03 	call	0x634	; 0x634 <input_ch_0>

	int cmd;
	for(cmd = 0; cmd < num_commands; cmd++)
 4d0:	40 91 10 20 	lds	r20, 0x2010	; 0x802010 <__data_end>
 4d4:	50 91 11 20 	lds	r21, 0x2011	; 0x802011 <__data_end+0x1>
 4d8:	22 e1       	ldi	r18, 0x12	; 18
 4da:	30 e2       	ldi	r19, 0x20	; 32
 4dc:	00 e0       	ldi	r16, 0x00	; 0
 4de:	10 e0       	ldi	r17, 0x00	; 0
 4e0:	04 17       	cp	r16, r20
 4e2:	15 07       	cpc	r17, r21
 4e4:	54 f4       	brge	.+20     	; 0x4fa <simpleserial_get+0x4e>
 4e6:	2b 5f       	subi	r18, 0xFB	; 251
 4e8:	3f 4f       	sbci	r19, 0xFF	; 255
	{
		if(commands[cmd].c == c)
 4ea:	f9 01       	movw	r30, r18
 4ec:	35 97       	sbiw	r30, 0x05	; 5
 4ee:	90 81       	ld	r25, Z
 4f0:	89 17       	cp	r24, r25
 4f2:	39 f0       	breq	.+14     	; 0x502 <simpleserial_get+0x56>

	// Find which command we're receiving
	c = getch();

	int cmd;
	for(cmd = 0; cmd < num_commands; cmd++)
 4f4:	0f 5f       	subi	r16, 0xFF	; 255
 4f6:	1f 4f       	sbci	r17, 0xFF	; 255
 4f8:	f3 cf       	rjmp	.-26     	; 0x4e0 <simpleserial_get+0x34>
		if(commands[cmd].c == c)
			break;
	}

	// If we didn't find a match, give up right away
	if(cmd == num_commands)
 4fa:	04 17       	cp	r16, r20
 4fc:	15 07       	cpc	r17, r21
 4fe:	09 f4       	brne	.+2      	; 0x502 <simpleserial_get+0x56>
 500:	54 c0       	rjmp	.+168    	; 0x5aa <simpleserial_get+0xfe>
 502:	9e 01       	movw	r18, r28
 504:	2f 5f       	subi	r18, 0xFF	; 255
 506:	3f 4f       	sbci	r19, 0xFF	; 255
 508:	79 01       	movw	r14, r18

	// Find which command we're receiving
	c = getch();

	int cmd;
	for(cmd = 0; cmd < num_commands; cmd++)
 50a:	69 01       	movw	r12, r18
	// If we didn't find a match, give up right away
	if(cmd == num_commands)
		return;

	// Receive characters until we fill the ASCII buffer
	for(int i = 0; i < 2*commands[cmd].len; i++)
 50c:	25 e0       	ldi	r18, 0x05	; 5
 50e:	20 9f       	mul	r18, r16
 510:	c0 01       	movw	r24, r0
 512:	21 9f       	mul	r18, r17
 514:	90 0d       	add	r25, r0
 516:	11 24       	eor	r1, r1
 518:	dc 01       	movw	r26, r24
 51a:	ad 5e       	subi	r26, 0xED	; 237
 51c:	bf 4d       	sbci	r27, 0xDF	; 223
 51e:	5d 01       	movw	r10, r26
 520:	d5 01       	movw	r26, r10
 522:	8d 91       	ld	r24, X+
 524:	9c 91       	ld	r25, X
 526:	88 0f       	add	r24, r24
 528:	99 1f       	adc	r25, r25
 52a:	96 01       	movw	r18, r12
 52c:	2e 19       	sub	r18, r14
 52e:	3f 09       	sbc	r19, r15
 530:	28 17       	cp	r18, r24
 532:	39 07       	cpc	r19, r25
 534:	50 f4       	brcc	.+20     	; 0x54a <simpleserial_get+0x9e>
	{
		c = getch();
 536:	0e 94 1a 03 	call	0x634	; 0x634 <input_ch_0>

		// Check for early \n
		if(c == '\n' || c == '\r')
 53a:	8a 30       	cpi	r24, 0x0A	; 10
 53c:	b1 f1       	breq	.+108    	; 0x5aa <simpleserial_get+0xfe>
 53e:	8d 30       	cpi	r24, 0x0D	; 13
 540:	a1 f1       	breq	.+104    	; 0x5aa <simpleserial_get+0xfe>
			return;

		ascii_buf[i] = c;
 542:	f6 01       	movw	r30, r12
 544:	81 93       	st	Z+, r24
 546:	6f 01       	movw	r12, r30
 548:	eb cf       	rjmp	.-42     	; 0x520 <simpleserial_get+0x74>
	}

	// Assert that last character is \n or \r
	c = getch();
 54a:	0e 94 1a 03 	call	0x634	; 0x634 <input_ch_0>
	if(c != '\n' && c != '\r')
 54e:	8a 30       	cpi	r24, 0x0A	; 10
 550:	11 f0       	breq	.+4      	; 0x556 <simpleserial_get+0xaa>
 552:	8d 30       	cpi	r24, 0x0D	; 13
 554:	51 f5       	brne	.+84     	; 0x5aa <simpleserial_get+0xfe>
		return;

	// ASCII buffer is full: convert to bytes 
	// Check for illegal characters here
	if(hex_decode(commands[cmd].len, ascii_buf, data_buf))
 556:	25 e0       	ldi	r18, 0x05	; 5
 558:	20 9f       	mul	r18, r16
 55a:	c0 01       	movw	r24, r0
 55c:	21 9f       	mul	r18, r17
 55e:	90 0d       	add	r25, r0
 560:	11 24       	eor	r1, r1
 562:	8c 01       	movw	r16, r24
 564:	0e 5e       	subi	r16, 0xEE	; 238
 566:	1f 4d       	sbci	r17, 0xDF	; 223
 568:	ae 01       	movw	r20, r28
 56a:	4f 57       	subi	r20, 0x7F	; 127
 56c:	5f 4f       	sbci	r21, 0xFF	; 255
 56e:	b7 01       	movw	r22, r14
 570:	f8 01       	movw	r30, r16
 572:	81 81       	ldd	r24, Z+1	; 0x01
 574:	92 81       	ldd	r25, Z+2	; 0x02
 576:	0e 94 b3 01 	call	0x366	; 0x366 <hex_decode>
 57a:	89 2b       	or	r24, r25
 57c:	b1 f4       	brne	.+44     	; 0x5aa <simpleserial_get+0xfe>
		return;

	// Callback
	uint8_t ret[1];
	ret[0] = commands[cmd].fp(data_buf);
 57e:	d8 01       	movw	r26, r16
 580:	13 96       	adiw	r26, 0x03	; 3
 582:	ed 91       	ld	r30, X+
 584:	fc 91       	ld	r31, X
 586:	14 97       	sbiw	r26, 0x04	; 4
 588:	ce 01       	movw	r24, r28
 58a:	8f 57       	subi	r24, 0x7F	; 127
 58c:	9f 4f       	sbci	r25, 0xFF	; 255
 58e:	19 95       	eicall
 590:	cf 53       	subi	r28, 0x3F	; 63
 592:	df 4f       	sbci	r29, 0xFF	; 255
 594:	88 83       	st	Y, r24
 596:	c1 5c       	subi	r28, 0xC1	; 193
 598:	d0 40       	sbci	r29, 0x00	; 0
	
	// Acknowledge (if version is 1.1)
#if SS_VER == SS_VER_1_1
	simpleserial_put('z', 1, ret);
 59a:	ae 01       	movw	r20, r28
 59c:	4f 53       	subi	r20, 0x3F	; 63
 59e:	5f 4f       	sbci	r21, 0xFF	; 255
 5a0:	61 e0       	ldi	r22, 0x01	; 1
 5a2:	70 e0       	ldi	r23, 0x00	; 0
 5a4:	8a e7       	ldi	r24, 0x7A	; 122
 5a6:	0e 94 22 02 	call	0x444	; 0x444 <simpleserial_put>
#endif
}
 5aa:	cf 53       	subi	r28, 0x3F	; 63
 5ac:	df 4f       	sbci	r29, 0xFF	; 255
 5ae:	cd bf       	out	0x3d, r28	; 61
 5b0:	de bf       	out	0x3e, r29	; 62
 5b2:	df 91       	pop	r29
 5b4:	cf 91       	pop	r28
 5b6:	1f 91       	pop	r17
 5b8:	0f 91       	pop	r16
 5ba:	ff 90       	pop	r15
 5bc:	ef 90       	pop	r14
 5be:	df 90       	pop	r13
 5c0:	cf 90       	pop	r12
 5c2:	bf 90       	pop	r11
 5c4:	af 90       	pop	r10
 5c6:	08 95       	ret

000005c8 <init_uart0>:
   )
   {
/* This PORT setting is only valid to USARTC0 if other USARTs is used a
	 * different PORT and/or pins is used. */
	/* PIN3 (TXD0) as output. */
	PORTC.DIRSET = PIN3_bm;
 5c8:	e0 e4       	ldi	r30, 0x40	; 64
 5ca:	f6 e0       	ldi	r31, 0x06	; 6
 5cc:	88 e0       	ldi	r24, 0x08	; 8
 5ce:	81 83       	std	Z+1, r24	; 0x01

	/* PC2 (RXD0) as input. */
	PORTC.DIRCLR = PIN2_bm;
 5d0:	84 e0       	ldi	r24, 0x04	; 4
 5d2:	82 83       	std	Z+2, r24	; 0x02

	/* USARTC0, 8 Data bits, No Parity, 1 Stop bit. */
	USART_Format_Set(&USART, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, false);
 5d4:	e0 ea       	ldi	r30, 0xA0	; 160
 5d6:	f8 e0       	ldi	r31, 0x08	; 8
 5d8:	83 e0       	ldi	r24, 0x03	; 3
 5da:	85 83       	std	Z+5, r24	; 0x05
	 * Do not use the baudrate scale factor
	 *
	 * Baudrate select = (1/(16*(((I/O clock frequency)/Baudrate)-1)
	 *                 = 12
	 */
	USART_Baudrate_Set(&USART, 11, 0);
 5dc:	8b e0       	ldi	r24, 0x0B	; 11
 5de:	86 83       	std	Z+6, r24	; 0x06
 5e0:	17 82       	std	Z+7, r1	; 0x07

	/* Enable both RX and TX. */
	USART_Rx_Enable(&USART);
 5e2:	84 81       	ldd	r24, Z+4	; 0x04
 5e4:	80 61       	ori	r24, 0x10	; 16
 5e6:	84 83       	std	Z+4, r24	; 0x04
	USART_Tx_Enable(&USART);
 5e8:	84 81       	ldd	r24, Z+4	; 0x04
 5ea:	88 60       	ori	r24, 0x08	; 8
 5ec:	84 83       	std	Z+4, r24	; 0x04
 5ee:	08 95       	ret

000005f0 <input_ch_w_timeout_0>:
unsigned char									input_ch_w_timeout_0
	(
   char *					 	data,
   volatile unsigned int				timeout
   )
   {
 5f0:	cf 93       	push	r28
 5f2:	df 93       	push	r29
 5f4:	1f 92       	push	r1
 5f6:	1f 92       	push	r1
 5f8:	cd b7       	in	r28, 0x3d	; 61
 5fa:	de b7       	in	r29, 0x3e	; 62
 5fc:	69 83       	std	Y+1, r22	; 0x01
 5fe:	7a 83       	std	Y+2, r23	; 0x02
   unsigned int				timeout_counter = 0;
 600:	20 e0       	ldi	r18, 0x00	; 0
 602:	30 e0       	ldi	r19, 0x00	; 0

   
   //check if a byte has been recieved or if the timeout has been excedded
   while (timeout_counter != timeout)
 604:	49 81       	ldd	r20, Y+1	; 0x01
 606:	5a 81       	ldd	r21, Y+2	; 0x02
 608:	24 17       	cp	r18, r20
 60a:	35 07       	cpc	r19, r21
 60c:	69 f0       	breq	.+26     	; 0x628 <input_ch_w_timeout_0+0x38>
		{	
		if (USART_IsRXComplete(&USART))
 60e:	40 91 a1 08 	lds	r20, 0x08A1	; 0x8008a1 <__TEXT_REGION_LENGTH__+0x7008a1>
 612:	47 ff       	sbrs	r20, 7
 614:	06 c0       	rjmp	.+12     	; 0x622 <input_ch_w_timeout_0+0x32>
			{
			*data = USART_GetChar(&USART);
 616:	20 91 a0 08 	lds	r18, 0x08A0	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
 61a:	fc 01       	movw	r30, r24
 61c:	20 83       	st	Z, r18
			return BYTE_REC;
 61e:	81 e0       	ldi	r24, 0x01	; 1
 620:	04 c0       	rjmp	.+8      	; 0x62a <input_ch_w_timeout_0+0x3a>
			}
		timeout_counter++;
 622:	2f 5f       	subi	r18, 0xFF	; 255
 624:	3f 4f       	sbci	r19, 0xFF	; 255
 626:	ee cf       	rjmp	.-36     	; 0x604 <input_ch_w_timeout_0+0x14>
		}
		
	return TIMEOUT;
 628:	80 e0       	ldi	r24, 0x00	; 0
	}
 62a:	0f 90       	pop	r0
 62c:	0f 90       	pop	r0
 62e:	df 91       	pop	r29
 630:	cf 91       	pop	r28
 632:	08 95       	ret

00000634 <input_ch_0>:
	(
   void
   )
   {
   //check if a byte has been recieved or if the timeout has been excedded
   while (!USART_IsRXComplete(&USART))
 634:	80 91 a1 08 	lds	r24, 0x08A1	; 0x8008a1 <__TEXT_REGION_LENGTH__+0x7008a1>
 638:	87 ff       	sbrs	r24, 7
 63a:	fc cf       	rjmp	.-8      	; 0x634 <input_ch_0>
		{
		continue;		
		}		
	return USART_GetChar(&USART);;
 63c:	80 91 a0 08 	lds	r24, 0x08A0	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
	}
 640:	08 95       	ret

00000642 <output_ch_0>:
void												output_ch_0
	(
	char							data
	)
	{
	while(!USART_IsTXDataRegisterEmpty(&USART));
 642:	90 91 a1 08 	lds	r25, 0x08A1	; 0x8008a1 <__TEXT_REGION_LENGTH__+0x7008a1>
 646:	95 ff       	sbrs	r25, 5
 648:	fc cf       	rjmp	.-8      	; 0x642 <output_ch_0>
	USART_PutChar(&USART, data);
 64a:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
 64e:	08 95       	ret

00000650 <USART_InterruptDriver_Initialize>:
 *  \param dreIntLevel          Data register empty interrupt level.
 */
void USART_InterruptDriver_Initialize(USART_data_t * usart_data,
                                      USART_t * usart,
                                      USART_DREINTLVL_t dreIntLevel)
{
 650:	fc 01       	movw	r30, r24
	usart_data->usart = usart;
 652:	60 83       	st	Z, r22
 654:	71 83       	std	Z+1, r23	; 0x01
	usart_data->dreIntLevel = dreIntLevel;
 656:	42 83       	std	Z+2, r20	; 0x02

	usart_data->buffer.RX_Tail = 0;
 658:	14 86       	std	Z+12, r1	; 0x0c
	usart_data->buffer.RX_Head = 0;
 65a:	13 86       	std	Z+11, r1	; 0x0b
	usart_data->buffer.TX_Tail = 0;
 65c:	16 86       	std	Z+14, r1	; 0x0e
	usart_data->buffer.TX_Head = 0;
 65e:	15 86       	std	Z+13, r1	; 0x0d
 660:	08 95       	ret

00000662 <USART_InterruptDriver_DreInterruptLevel_Set>:
 *  \param dreIntLevel        Interrupt level of the DRE interrupt.
 */
void USART_InterruptDriver_DreInterruptLevel_Set(USART_data_t * usart_data,
                                                 USART_DREINTLVL_t dreIntLevel)
{
	usart_data->dreIntLevel = dreIntLevel;
 662:	fc 01       	movw	r30, r24
 664:	62 83       	std	Z+2, r22	; 0x02
 666:	08 95       	ret

00000668 <USART_TXBuffer_FreeSpace>:
 *
 *  \retval true      There is data in the receive buffer.
 *  \retval false     The receive buffer is empty.
 */
bool USART_TXBuffer_FreeSpace(USART_data_t * usart_data)
{
 668:	fc 01       	movw	r30, r24
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = (usart_data->buffer.TX_Head + 1) & USART_TX_BUFFER_MASK;
 66a:	95 85       	ldd	r25, Z+13	; 0x0d
	uint8_t tempTail = usart_data->buffer.TX_Tail;
 66c:	26 85       	ldd	r18, Z+14	; 0x0e

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
 66e:	9f 5f       	subi	r25, 0xFF	; 255
 670:	93 70       	andi	r25, 0x03	; 3
 672:	81 e0       	ldi	r24, 0x01	; 1
 674:	92 13       	cpse	r25, r18
 676:	01 c0       	rjmp	.+2      	; 0x67a <USART_TXBuffer_FreeSpace+0x12>
 678:	80 e0       	ldi	r24, 0x00	; 0
}
 67a:	08 95       	ret

0000067c <USART_TXBuffer_PutByte>:
 *
 *  \param usart_data The USART_data_t struct instance.
 *  \param data       The data to send.
 */
bool USART_TXBuffer_PutByte(USART_data_t * usart_data, uint8_t data)
{
 67c:	1f 93       	push	r17
 67e:	cf 93       	push	r28
 680:	df 93       	push	r29
 682:	ec 01       	movw	r28, r24
 684:	16 2f       	mov	r17, r22
	uint8_t tempTX_Head;
	bool TXBuffer_FreeSpace;
	USART_Buffer_t * TXbufPtr;

	TXbufPtr = &usart_data->buffer;
	TXBuffer_FreeSpace = USART_TXBuffer_FreeSpace(usart_data);
 686:	0e 94 34 03 	call	0x668	; 0x668 <USART_TXBuffer_FreeSpace>


	if(TXBuffer_FreeSpace)
 68a:	88 23       	and	r24, r24
 68c:	79 f0       	breq	.+30     	; 0x6ac <USART_TXBuffer_PutByte+0x30>
	{
	  	tempTX_Head = TXbufPtr->TX_Head;
 68e:	9d 85       	ldd	r25, Y+13	; 0x0d
	  	TXbufPtr->TX[tempTX_Head]= data;
 690:	fe 01       	movw	r30, r28
 692:	e9 0f       	add	r30, r25
 694:	f1 1d       	adc	r31, r1
 696:	17 83       	std	Z+7, r17	; 0x07
		/* Advance buffer head. */
		TXbufPtr->TX_Head = (tempTX_Head + 1) & USART_TX_BUFFER_MASK;
 698:	9f 5f       	subi	r25, 0xFF	; 255
 69a:	93 70       	andi	r25, 0x03	; 3
 69c:	9d 87       	std	Y+13, r25	; 0x0d

		/* Enable DRE interrupt. */
		tempCTRLA = usart_data->usart->CTRLA;
 69e:	e8 81       	ld	r30, Y
 6a0:	f9 81       	ldd	r31, Y+1	; 0x01
 6a2:	93 81       	ldd	r25, Z+3	; 0x03
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | usart_data->dreIntLevel;
 6a4:	9c 7f       	andi	r25, 0xFC	; 252
 6a6:	2a 81       	ldd	r18, Y+2	; 0x02
 6a8:	92 2b       	or	r25, r18
		usart_data->usart->CTRLA = tempCTRLA;
 6aa:	93 83       	std	Z+3, r25	; 0x03
	}
	return TXBuffer_FreeSpace;
}
 6ac:	df 91       	pop	r29
 6ae:	cf 91       	pop	r28
 6b0:	1f 91       	pop	r17
 6b2:	08 95       	ret

000006b4 <USART_RXBufferData_Available>:
 *  \retval false     The receive buffer is empty.
 */
bool USART_RXBufferData_Available(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = usart_data->buffer.RX_Head;
 6b4:	fc 01       	movw	r30, r24
 6b6:	23 85       	ldd	r18, Z+11	; 0x0b
	uint8_t tempTail = usart_data->buffer.RX_Tail;
 6b8:	94 85       	ldd	r25, Z+12	; 0x0c

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
 6ba:	81 e0       	ldi	r24, 0x01	; 1
 6bc:	29 13       	cpse	r18, r25
 6be:	01 c0       	rjmp	.+2      	; 0x6c2 <USART_RXBufferData_Available+0xe>
 6c0:	80 e0       	ldi	r24, 0x00	; 0
}
 6c2:	08 95       	ret

000006c4 <USART_RXBuffer_GetByte>:
 *  \param usart_data       The USART_data_t struct instance.
 *
 *  \return         Received data.
 */
uint8_t USART_RXBuffer_GetByte(USART_data_t * usart_data)
{
 6c4:	fc 01       	movw	r30, r24
	USART_Buffer_t * bufPtr;
	uint8_t ans;

	bufPtr = &usart_data->buffer;
	ans = (bufPtr->RX[bufPtr->RX_Tail]);
 6c6:	84 85       	ldd	r24, Z+12	; 0x0c
 6c8:	df 01       	movw	r26, r30
 6ca:	a8 0f       	add	r26, r24
 6cc:	b1 1d       	adc	r27, r1
 6ce:	13 96       	adiw	r26, 0x03	; 3
 6d0:	8c 91       	ld	r24, X

	/* Advance buffer tail. */
	bufPtr->RX_Tail = (bufPtr->RX_Tail + 1) & USART_RX_BUFFER_MASK;
 6d2:	94 85       	ldd	r25, Z+12	; 0x0c
 6d4:	9f 5f       	subi	r25, 0xFF	; 255
 6d6:	93 70       	andi	r25, 0x03	; 3
 6d8:	94 87       	std	Z+12, r25	; 0x0c

	return ans;
}
 6da:	08 95       	ret

000006dc <USART_RXComplete>:
 *  Stores received data in RX software buffer.
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
bool USART_RXComplete(USART_data_t * usart_data)
{
 6dc:	fc 01       	movw	r30, r24
	USART_Buffer_t * bufPtr;
	bool ans;

	bufPtr = &usart_data->buffer;
	/* Advance buffer head. */
	uint8_t tempRX_Head = (bufPtr->RX_Head + 1) & USART_RX_BUFFER_MASK;
 6de:	83 85       	ldd	r24, Z+11	; 0x0b
 6e0:	8f 5f       	subi	r24, 0xFF	; 255
 6e2:	83 70       	andi	r24, 0x03	; 3

	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
 6e4:	24 85       	ldd	r18, Z+12	; 0x0c
	uint8_t data = usart_data->usart->DATA;
 6e6:	a0 81       	ld	r26, Z
 6e8:	b1 81       	ldd	r27, Z+1	; 0x01
 6ea:	9c 91       	ld	r25, X

	if (tempRX_Head == tempRX_Tail) {
 6ec:	82 17       	cp	r24, r18
 6ee:	49 f0       	breq	.+18     	; 0x702 <USART_RXComplete+0x26>
	  	ans = false;
	}else{
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
 6f0:	23 85       	ldd	r18, Z+11	; 0x0b
 6f2:	df 01       	movw	r26, r30
 6f4:	a2 0f       	add	r26, r18
 6f6:	b1 1d       	adc	r27, r1
 6f8:	13 96       	adiw	r26, 0x03	; 3
 6fa:	9c 93       	st	X, r25
		usart_data->buffer.RX_Head = tempRX_Head;
 6fc:	83 87       	std	Z+11, r24	; 0x0b
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
	}else{
		ans = true;
 6fe:	81 e0       	ldi	r24, 0x01	; 1
 700:	08 95       	ret
	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
 702:	80 e0       	ldi	r24, 0x00	; 0
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
		usart_data->buffer.RX_Head = tempRX_Head;
	}
	return ans;
}
 704:	08 95       	ret

00000706 <USART_DataRegEmpty>:
 *  is empty. Argument is pointer to USART (USART_data_t).
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
void USART_DataRegEmpty(USART_data_t * usart_data)
{
 706:	cf 93       	push	r28
 708:	df 93       	push	r29
 70a:	fc 01       	movw	r30, r24
	USART_Buffer_t * bufPtr;
	bufPtr = &usart_data->buffer;

	/* Check if all data is transmitted. */
	uint8_t tempTX_Tail = usart_data->buffer.TX_Tail;
 70c:	96 85       	ldd	r25, Z+14	; 0x0e
	if (bufPtr->TX_Head == tempTX_Tail){
 70e:	85 85       	ldd	r24, Z+13	; 0x0d
 710:	a0 81       	ld	r26, Z
 712:	b1 81       	ldd	r27, Z+1	; 0x01
 714:	98 13       	cpse	r25, r24
 716:	07 c0       	rjmp	.+14     	; 0x726 <USART_DataRegEmpty+0x20>
	    /* Disable DRE interrupts. */
		uint8_t tempCTRLA = usart_data->usart->CTRLA;
 718:	13 96       	adiw	r26, 0x03	; 3
 71a:	8c 91       	ld	r24, X
 71c:	13 97       	sbiw	r26, 0x03	; 3
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | USART_DREINTLVL_OFF_gc;
 71e:	8c 7f       	andi	r24, 0xFC	; 252
		usart_data->usart->CTRLA = tempCTRLA;
 720:	13 96       	adiw	r26, 0x03	; 3
 722:	8c 93       	st	X, r24
 724:	0a c0       	rjmp	.+20     	; 0x73a <USART_DataRegEmpty+0x34>

	}else{
		/* Start transmitting. */
		uint8_t data = bufPtr->TX[usart_data->buffer.TX_Tail];
 726:	86 85       	ldd	r24, Z+14	; 0x0e
 728:	ef 01       	movw	r28, r30
 72a:	c8 0f       	add	r28, r24
 72c:	d1 1d       	adc	r29, r1
 72e:	8f 81       	ldd	r24, Y+7	; 0x07
		usart_data->usart->DATA = data;
 730:	8c 93       	st	X, r24

		/* Advance buffer tail. */
		bufPtr->TX_Tail = (bufPtr->TX_Tail + 1) & USART_TX_BUFFER_MASK;
 732:	86 85       	ldd	r24, Z+14	; 0x0e
 734:	8f 5f       	subi	r24, 0xFF	; 255
 736:	83 70       	andi	r24, 0x03	; 3
 738:	86 87       	std	Z+14, r24	; 0x0e
	}
}
 73a:	df 91       	pop	r29
 73c:	cf 91       	pop	r28
 73e:	08 95       	ret

00000740 <USART_NineBits_PutChar>:
 *
 *  \param usart      The USART module.
 *  \param data       The data to send.
 */
void USART_NineBits_PutChar(USART_t * usart, uint16_t data)
{
 740:	fc 01       	movw	r30, r24
	if(data & 0x0100) {
		usart->CTRLB |= USART_TXB8_bm;
 742:	84 81       	ldd	r24, Z+4	; 0x04
 *  \param usart      The USART module.
 *  \param data       The data to send.
 */
void USART_NineBits_PutChar(USART_t * usart, uint16_t data)
{
	if(data & 0x0100) {
 744:	70 ff       	sbrs	r23, 0
 746:	02 c0       	rjmp	.+4      	; 0x74c <USART_NineBits_PutChar+0xc>
		usart->CTRLB |= USART_TXB8_bm;
 748:	81 60       	ori	r24, 0x01	; 1
 74a:	01 c0       	rjmp	.+2      	; 0x74e <USART_NineBits_PutChar+0xe>
	}else {
		usart->CTRLB &= ~USART_TXB8_bm;
 74c:	8e 7f       	andi	r24, 0xFE	; 254
 74e:	84 83       	std	Z+4, r24	; 0x04
	}

	usart->DATA = (data & 0x00FF);
 750:	60 83       	st	Z, r22
 752:	08 95       	ret

00000754 <USART_NineBits_GetChar>:
 *  \param usart      The USART module.
 *
 *  \retval           Received data.
 */
uint16_t USART_NineBits_GetChar(USART_t * usart)
{
 754:	fc 01       	movw	r30, r24
	if(usart->CTRLB & USART_RXB8_bm) {
 756:	84 81       	ldd	r24, Z+4	; 0x04
 758:	80 ff       	sbrs	r24, 0
 75a:	04 c0       	rjmp	.+8      	; 0x764 <USART_NineBits_GetChar+0x10>
		return(0x0100 | usart->DATA);
 75c:	80 81       	ld	r24, Z
 75e:	90 e0       	ldi	r25, 0x00	; 0
 760:	91 60       	ori	r25, 0x01	; 1
 762:	08 95       	ret
	}else {
		return(usart->DATA);
 764:	80 81       	ld	r24, Z
 766:	90 e0       	ldi	r25, 0x00	; 0
	}
}
 768:	08 95       	ret

0000076a <platform_init>:
#include "hal.h"
#include "xmega_hal.h"

void platform_init(void)
{  
    OSC.XOSCCTRL = 0x00;
 76a:	10 92 52 00 	sts	0x0052, r1	; 0x800052 <__TEXT_REGION_LENGTH__+0x700052>
    OSC.PLLCTRL = 0x00;
 76e:	10 92 55 00 	sts	0x0055, r1	; 0x800055 <__TEXT_REGION_LENGTH__+0x700055>
    OSC.CTRL |= OSC_XOSCEN_bm;
 772:	80 91 50 00 	lds	r24, 0x0050	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
 776:	88 60       	ori	r24, 0x08	; 8
 778:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
    
    //wait for clock
    while((OSC.STATUS & OSC_XOSCRDY_bm) == 0);
 77c:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
 780:	83 ff       	sbrs	r24, 3
 782:	fc cf       	rjmp	.-8      	; 0x77c <platform_init+0x12>
    
    //Switch clock source
    CCP = CCP_IOREG_gc;
 784:	88 ed       	ldi	r24, 0xD8	; 216
 786:	84 bf       	out	0x34, r24	; 52
    CLK.CTRL = CLK_SCLKSEL_XOSC_gc;    
 788:	83 e0       	ldi	r24, 0x03	; 3
 78a:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
    
    //Turn off other sources besides external    
    OSC.CTRL = OSC_XOSCEN_bm;
 78e:	88 e0       	ldi	r24, 0x08	; 8
 790:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
    
 #if PLATFORM == CW303
    PORTA.DIRSET = PIN5_bm | PIN6_bm;
 794:	80 e6       	ldi	r24, 0x60	; 96
 796:	80 93 01 06 	sts	0x0601, r24	; 0x800601 <__TEXT_REGION_LENGTH__+0x700601>
    PORTA.OUTSET = PIN5_bm | PIN6_bm;
 79a:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x700605>
 79e:	08 95       	ret

000007a0 <aes_indep_init>:
#include "aes_keyschedule.h"

aes128_ctx_t ctx;

void aes_indep_init(void)
{
 7a0:	08 95       	ret

000007a2 <aes_indep_key>:
	;
}

void aes_indep_key(uint8_t * key)
{
	aes128_init(key, &ctx);
 7a2:	64 e4       	ldi	r22, 0x44	; 68
 7a4:	70 e2       	ldi	r23, 0x20	; 32
 7a6:	0c 94 d0 05 	jmp	0xba0	; 0xba0 <aes128_init>

000007aa <aes_indep_enc>:
}

void aes_indep_enc(uint8_t * pt)
{
	aes128_enc(pt, &ctx); /* encrypting the data block */
 7aa:	64 e4       	ldi	r22, 0x44	; 68
 7ac:	70 e2       	ldi	r23, 0x20	; 32
 7ae:	0c 94 df 05 	jmp	0xbbe	; 0xbbe <aes128_enc>

000007b2 <aes_indep_mask>:
}

void aes_indep_mask(uint8_t * m)
{
 7b2:	08 95       	ret

000007b4 <aes_shiftcol>:
#include "gf256mul.h"
#include "aes_sbox.h"
#include "aes_enc.h"
#include <avr/pgmspace.h>

void aes_shiftcol(void* data, uint8_t shift){
 7b4:	cf 93       	push	r28
 7b6:	df 93       	push	r29
 7b8:	00 d0       	rcall	.+0      	; 0x7ba <aes_shiftcol+0x6>
 7ba:	1f 92       	push	r1
 7bc:	cd b7       	in	r28, 0x3d	; 61
 7be:	de b7       	in	r29, 0x3e	; 62
 7c0:	dc 01       	movw	r26, r24
	uint8_t tmp[4];
	tmp[0] = ((uint8_t*)data)[ 0];
 7c2:	8c 91       	ld	r24, X
 7c4:	89 83       	std	Y+1, r24	; 0x01
	tmp[1] = ((uint8_t*)data)[ 4];
 7c6:	14 96       	adiw	r26, 0x04	; 4
 7c8:	8c 91       	ld	r24, X
 7ca:	14 97       	sbiw	r26, 0x04	; 4
 7cc:	8a 83       	std	Y+2, r24	; 0x02
	tmp[2] = ((uint8_t*)data)[ 8];
 7ce:	18 96       	adiw	r26, 0x08	; 8
 7d0:	8c 91       	ld	r24, X
 7d2:	18 97       	sbiw	r26, 0x08	; 8
 7d4:	8b 83       	std	Y+3, r24	; 0x03
	tmp[3] = ((uint8_t*)data)[12];
 7d6:	1c 96       	adiw	r26, 0x0c	; 12
 7d8:	8c 91       	ld	r24, X
 7da:	1c 97       	sbiw	r26, 0x0c	; 12
 7dc:	8c 83       	std	Y+4, r24	; 0x04
	((uint8_t*)data)[ 0] = tmp[(shift+0)&3];
 7de:	86 2f       	mov	r24, r22
 7e0:	83 70       	andi	r24, 0x03	; 3
 7e2:	e1 e0       	ldi	r30, 0x01	; 1
 7e4:	f0 e0       	ldi	r31, 0x00	; 0
 7e6:	ec 0f       	add	r30, r28
 7e8:	fd 1f       	adc	r31, r29
 7ea:	e8 0f       	add	r30, r24
 7ec:	f1 1d       	adc	r31, r1
 7ee:	80 81       	ld	r24, Z
 7f0:	8c 93       	st	X, r24
	((uint8_t*)data)[ 4] = tmp[(shift+1)&3];
 7f2:	70 e0       	ldi	r23, 0x00	; 0
 7f4:	fb 01       	movw	r30, r22
 7f6:	31 96       	adiw	r30, 0x01	; 1
 7f8:	e3 70       	andi	r30, 0x03	; 3
 7fa:	ff 27       	eor	r31, r31
 7fc:	81 e0       	ldi	r24, 0x01	; 1
 7fe:	90 e0       	ldi	r25, 0x00	; 0
 800:	8c 0f       	add	r24, r28
 802:	9d 1f       	adc	r25, r29
 804:	e8 0f       	add	r30, r24
 806:	f9 1f       	adc	r31, r25
 808:	80 81       	ld	r24, Z
 80a:	14 96       	adiw	r26, 0x04	; 4
 80c:	8c 93       	st	X, r24
 80e:	14 97       	sbiw	r26, 0x04	; 4
	((uint8_t*)data)[ 8] = tmp[(shift+2)&3];
 810:	fb 01       	movw	r30, r22
 812:	32 96       	adiw	r30, 0x02	; 2
 814:	e3 70       	andi	r30, 0x03	; 3
 816:	ff 27       	eor	r31, r31
 818:	81 e0       	ldi	r24, 0x01	; 1
 81a:	90 e0       	ldi	r25, 0x00	; 0
 81c:	8c 0f       	add	r24, r28
 81e:	9d 1f       	adc	r25, r29
 820:	e8 0f       	add	r30, r24
 822:	f9 1f       	adc	r31, r25
 824:	80 81       	ld	r24, Z
 826:	18 96       	adiw	r26, 0x08	; 8
 828:	8c 93       	st	X, r24
 82a:	18 97       	sbiw	r26, 0x08	; 8
	((uint8_t*)data)[12] = tmp[(shift+3)&3];
 82c:	fb 01       	movw	r30, r22
 82e:	33 96       	adiw	r30, 0x03	; 3
 830:	e3 70       	andi	r30, 0x03	; 3
 832:	ff 27       	eor	r31, r31
 834:	81 e0       	ldi	r24, 0x01	; 1
 836:	90 e0       	ldi	r25, 0x00	; 0
 838:	8c 0f       	add	r24, r28
 83a:	9d 1f       	adc	r25, r29
 83c:	e8 0f       	add	r30, r24
 83e:	f9 1f       	adc	r31, r25
 840:	80 81       	ld	r24, Z
 842:	1c 96       	adiw	r26, 0x0c	; 12
 844:	8c 93       	st	X, r24
}
 846:	24 96       	adiw	r28, 0x04	; 4
 848:	cd bf       	out	0x3d, r28	; 61
 84a:	de bf       	out	0x3e, r29	; 62
 84c:	df 91       	pop	r29
 84e:	cf 91       	pop	r28
 850:	08 95       	ret

00000852 <aes_encrypt_core>:
	for(i=0; i<16; ++i){
		state->s[i] ^= k->ks[i];
	}
}

void aes_encrypt_core(aes_cipher_state_t* state, const aes_genctx_t* ks, uint8_t rounds){
 852:	2f 92       	push	r2
 854:	3f 92       	push	r3
 856:	4f 92       	push	r4
 858:	5f 92       	push	r5
 85a:	6f 92       	push	r6
 85c:	7f 92       	push	r7
 85e:	8f 92       	push	r8
 860:	9f 92       	push	r9
 862:	af 92       	push	r10
 864:	bf 92       	push	r11
 866:	cf 92       	push	r12
 868:	df 92       	push	r13
 86a:	ef 92       	push	r14
 86c:	ff 92       	push	r15
 86e:	0f 93       	push	r16
 870:	1f 93       	push	r17
 872:	cf 93       	push	r28
 874:	df 93       	push	r29
 876:	cd b7       	in	r28, 0x3d	; 61
 878:	de b7       	in	r29, 0x3e	; 62
 87a:	63 97       	sbiw	r28, 0x13	; 19
 87c:	cd bf       	out	0x3d, r28	; 61
 87e:	de bf       	out	0x3e, r29	; 62
 880:	7c 01       	movw	r14, r24
 882:	5b 01       	movw	r10, r22
 884:	24 2e       	mov	r2, r20
 886:	db 01       	movw	r26, r22
 888:	8a 8b       	std	Y+18, r24	; 0x12
 88a:	9b 8b       	std	Y+19, r25	; 0x13
 88c:	2c 01       	movw	r4, r24
 88e:	20 e1       	ldi	r18, 0x10	; 16
 890:	42 0e       	add	r4, r18
 892:	51 1c       	adc	r5, r1
 894:	fc 01       	movw	r30, r24
	uint8_t i;
	for(i=0; i<16; ++i){
		state->s[i] ^= ks->key[0].ks[i];
 896:	8d 91       	ld	r24, X+
 898:	90 81       	ld	r25, Z
 89a:	89 27       	eor	r24, r25
 89c:	81 93       	st	Z+, r24
	}
}

void aes_encrypt_core(aes_cipher_state_t* state, const aes_genctx_t* ks, uint8_t rounds){
	uint8_t i;
	for(i=0; i<16; ++i){
 89e:	e4 15       	cp	r30, r4
 8a0:	f5 05       	cpc	r31, r5
 8a2:	c9 f7       	brne	.-14     	; 0x896 <aes_encrypt_core+0x44>
 8a4:	45 01       	movw	r8, r10
 8a6:	30 e1       	ldi	r19, 0x10	; 16
 8a8:	83 0e       	add	r8, r19
 8aa:	91 1c       	adc	r9, r1
 8ac:	81 e0       	ldi	r24, 0x01	; 1
 8ae:	89 8b       	std	Y+17, r24	; 0x11
 8b0:	3e 01       	movw	r6, r28
 8b2:	a1 e1       	ldi	r26, 0x11	; 17
 8b4:	6a 0e       	add	r6, r26
 8b6:	71 1c       	adc	r7, r1
		state->s[i] ^= ks->key[0].ks[i];
	}
	i=1;
	for(;rounds>1;--rounds){
 8b8:	21 e0       	ldi	r18, 0x01	; 1
 8ba:	22 15       	cp	r18, r2
 8bc:	08 f0       	brcs	.+2      	; 0x8c0 <aes_encrypt_core+0x6e>
 8be:	81 c0       	rjmp	.+258    	; 0x9c2 <aes_encrypt_core+0x170>
 8c0:	8e 01       	movw	r16, r28
 8c2:	0f 5f       	subi	r16, 0xFF	; 255
 8c4:	1f 4f       	sbci	r17, 0xFF	; 255
 8c6:	d8 01       	movw	r26, r16
 8c8:	c7 01       	movw	r24, r14
void aes_enc_round(aes_cipher_state_t* state, const aes_roundkey_t* k){
	uint8_t tmp[16], t;
	uint8_t i;
	/* subBytes */
	for(i=0; i<16; ++i){
		tmp[i] = pgm_read_byte(aes_sbox+state->s[i]);
 8ca:	fc 01       	movw	r30, r24
 8cc:	21 91       	ld	r18, Z+
 8ce:	cf 01       	movw	r24, r30
 8d0:	e2 2f       	mov	r30, r18
 8d2:	f0 e0       	ldi	r31, 0x00	; 0
 8d4:	ee 51       	subi	r30, 0x1E	; 30
 8d6:	fe 4f       	sbci	r31, 0xFE	; 254
 8d8:	e4 91       	lpm	r30, Z
 8da:	ed 93       	st	X+, r30
static
void aes_enc_round(aes_cipher_state_t* state, const aes_roundkey_t* k){
	uint8_t tmp[16], t;
	uint8_t i;
	/* subBytes */
	for(i=0; i<16; ++i){
 8dc:	a6 15       	cp	r26, r6
 8de:	b7 05       	cpc	r27, r7
 8e0:	a1 f7       	brne	.-24     	; 0x8ca <aes_encrypt_core+0x78>
		tmp[i] = pgm_read_byte(aes_sbox+state->s[i]);
	}
	/* shiftRows */
	aes_shiftcol(tmp+1, 1);
 8e2:	61 e0       	ldi	r22, 0x01	; 1
 8e4:	ce 01       	movw	r24, r28
 8e6:	02 96       	adiw	r24, 0x02	; 2
 8e8:	0e 94 da 03 	call	0x7b4	; 0x7b4 <aes_shiftcol>
	aes_shiftcol(tmp+2, 2);
 8ec:	62 e0       	ldi	r22, 0x02	; 2
 8ee:	ce 01       	movw	r24, r28
 8f0:	03 96       	adiw	r24, 0x03	; 3
 8f2:	0e 94 da 03 	call	0x7b4	; 0x7b4 <aes_shiftcol>
	aes_shiftcol(tmp+3, 3);
 8f6:	63 e0       	ldi	r22, 0x03	; 3
 8f8:	ce 01       	movw	r24, r28
 8fa:	04 96       	adiw	r24, 0x04	; 4
 8fc:	0e 94 da 03 	call	0x7b4	; 0x7b4 <aes_shiftcol>
 900:	67 01       	movw	r12, r14
	/* mixColums */
	for(i=0; i<4; ++i){
		t = tmp[4*i+0] ^ tmp[4*i+1] ^ tmp[4*i+2] ^ tmp[4*i+3];
 902:	d8 01       	movw	r26, r16
 904:	6c 91       	ld	r22, X
 906:	11 96       	adiw	r26, 0x01	; 1
 908:	8c 91       	ld	r24, X
 90a:	11 97       	sbiw	r26, 0x01	; 1
 90c:	68 27       	eor	r22, r24
 90e:	12 96       	adiw	r26, 0x02	; 2
 910:	3c 90       	ld	r3, X
 912:	12 97       	sbiw	r26, 0x02	; 2
 914:	13 96       	adiw	r26, 0x03	; 3
 916:	8c 91       	ld	r24, X
 918:	38 26       	eor	r3, r24
 91a:	36 26       	eor	r3, r22
		state->s[4*i+0] =
			  GF256MUL_2(tmp[4*i+0]^tmp[4*i+1])
 91c:	4b e1       	ldi	r20, 0x1B	; 27
 91e:	82 e0       	ldi	r24, 0x02	; 2
 920:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <gf256mul>
	aes_shiftcol(tmp+2, 2);
	aes_shiftcol(tmp+3, 3);
	/* mixColums */
	for(i=0; i<4; ++i){
		t = tmp[4*i+0] ^ tmp[4*i+1] ^ tmp[4*i+2] ^ tmp[4*i+3];
		state->s[4*i+0] =
 924:	f8 01       	movw	r30, r16
 926:	90 81       	ld	r25, Z
 928:	89 27       	eor	r24, r25
 92a:	83 25       	eor	r24, r3
 92c:	d6 01       	movw	r26, r12
 92e:	8c 93       	st	X, r24
			  GF256MUL_2(tmp[4*i+0]^tmp[4*i+1])
			^ tmp[4*i+0]
			^ t;
		state->s[4*i+1] =
			  GF256MUL_2(tmp[4*i+1]^tmp[4*i+2])
 930:	61 81       	ldd	r22, Z+1	; 0x01
 932:	82 81       	ldd	r24, Z+2	; 0x02
 934:	68 27       	eor	r22, r24
 936:	4b e1       	ldi	r20, 0x1B	; 27
 938:	82 e0       	ldi	r24, 0x02	; 2
 93a:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <gf256mul>
		t = tmp[4*i+0] ^ tmp[4*i+1] ^ tmp[4*i+2] ^ tmp[4*i+3];
		state->s[4*i+0] =
			  GF256MUL_2(tmp[4*i+0]^tmp[4*i+1])
			^ tmp[4*i+0]
			^ t;
		state->s[4*i+1] =
 93e:	f8 01       	movw	r30, r16
 940:	91 81       	ldd	r25, Z+1	; 0x01
 942:	89 27       	eor	r24, r25
 944:	83 25       	eor	r24, r3
 946:	d6 01       	movw	r26, r12
 948:	11 96       	adiw	r26, 0x01	; 1
 94a:	8c 93       	st	X, r24
			  GF256MUL_2(tmp[4*i+1]^tmp[4*i+2])
			^ tmp[4*i+1]
			^ t;
		state->s[4*i+2] =
			  GF256MUL_2(tmp[4*i+2]^tmp[4*i+3])
 94c:	62 81       	ldd	r22, Z+2	; 0x02
 94e:	83 81       	ldd	r24, Z+3	; 0x03
 950:	68 27       	eor	r22, r24
 952:	4b e1       	ldi	r20, 0x1B	; 27
 954:	82 e0       	ldi	r24, 0x02	; 2
 956:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <gf256mul>
			^ t;
		state->s[4*i+1] =
			  GF256MUL_2(tmp[4*i+1]^tmp[4*i+2])
			^ tmp[4*i+1]
			^ t;
		state->s[4*i+2] =
 95a:	f8 01       	movw	r30, r16
 95c:	92 81       	ldd	r25, Z+2	; 0x02
 95e:	89 27       	eor	r24, r25
 960:	83 25       	eor	r24, r3
 962:	d6 01       	movw	r26, r12
 964:	12 96       	adiw	r26, 0x02	; 2
 966:	8c 93       	st	X, r24
			  GF256MUL_2(tmp[4*i+2]^tmp[4*i+3])
			^ tmp[4*i+2]
			^ t;
		state->s[4*i+3] =
			  GF256MUL_2(tmp[4*i+3]^tmp[4*i+0])
 968:	63 81       	ldd	r22, Z+3	; 0x03
 96a:	80 81       	ld	r24, Z
 96c:	68 27       	eor	r22, r24
 96e:	4b e1       	ldi	r20, 0x1B	; 27
 970:	82 e0       	ldi	r24, 0x02	; 2
 972:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <gf256mul>
			^ t;
		state->s[4*i+2] =
			  GF256MUL_2(tmp[4*i+2]^tmp[4*i+3])
			^ tmp[4*i+2]
			^ t;
		state->s[4*i+3] =
 976:	f8 01       	movw	r30, r16
 978:	93 81       	ldd	r25, Z+3	; 0x03
 97a:	89 27       	eor	r24, r25
 97c:	38 26       	eor	r3, r24
 97e:	d6 01       	movw	r26, r12
 980:	13 96       	adiw	r26, 0x03	; 3
 982:	3c 92       	st	X, r3
 984:	0c 5f       	subi	r16, 0xFC	; 252
 986:	1f 4f       	sbci	r17, 0xFF	; 255
 988:	b4 e0       	ldi	r27, 0x04	; 4
 98a:	cb 0e       	add	r12, r27
 98c:	d1 1c       	adc	r13, r1
	/* shiftRows */
	aes_shiftcol(tmp+1, 1);
	aes_shiftcol(tmp+2, 2);
	aes_shiftcol(tmp+3, 3);
	/* mixColums */
	for(i=0; i<4; ++i){
 98e:	06 15       	cp	r16, r6
 990:	17 05       	cpc	r17, r7
 992:	09 f0       	breq	.+2      	; 0x996 <aes_encrypt_core+0x144>
 994:	b6 cf       	rjmp	.-148    	; 0x902 <aes_encrypt_core+0xb0>
 996:	f7 01       	movw	r30, r14
 998:	80 e0       	ldi	r24, 0x00	; 0
 99a:	90 e0       	ldi	r25, 0x00	; 0
			^ t;
	}

	/* addKey */
	for(i=0; i<16; ++i){
		state->s[i] ^= k->ks[i];
 99c:	d4 01       	movw	r26, r8
 99e:	a8 0f       	add	r26, r24
 9a0:	b9 1f       	adc	r27, r25
 9a2:	30 81       	ld	r19, Z
 9a4:	2c 91       	ld	r18, X
 9a6:	23 27       	eor	r18, r19
 9a8:	21 93       	st	Z+, r18
 9aa:	01 96       	adiw	r24, 0x01	; 1
			^ tmp[4*i+3]
			^ t;
	}

	/* addKey */
	for(i=0; i<16; ++i){
 9ac:	80 31       	cpi	r24, 0x10	; 16
 9ae:	91 05       	cpc	r25, r1
 9b0:	a9 f7       	brne	.-22     	; 0x99c <aes_encrypt_core+0x14a>
		state->s[i] ^= ks->key[0].ks[i];
	}
	i=1;
	for(;rounds>1;--rounds){
		aes_enc_round(state, &(ks->key[i]));
		++i;
 9b2:	e9 89       	ldd	r30, Y+17	; 0x11
 9b4:	ef 5f       	subi	r30, 0xFF	; 255
 9b6:	e9 8b       	std	Y+17, r30	; 0x11
	uint8_t i;
	for(i=0; i<16; ++i){
		state->s[i] ^= ks->key[0].ks[i];
	}
	i=1;
	for(;rounds>1;--rounds){
 9b8:	2a 94       	dec	r2
 9ba:	f0 e1       	ldi	r31, 0x10	; 16
 9bc:	8f 0e       	add	r8, r31
 9be:	91 1c       	adc	r9, r1
 9c0:	7b cf       	rjmp	.-266    	; 0x8b8 <aes_encrypt_core+0x66>
		aes_enc_round(state, &(ks->key[i]));
		++i;
	}
	aes_enc_lastround(state, &(ks->key[i]));
 9c2:	d7 01       	movw	r26, r14
static
void aes_enc_lastround(aes_cipher_state_t* state,const aes_roundkey_t* k){
	uint8_t i;
	/* subBytes */
	for(i=0; i<16; ++i){
		state->s[i] = pgm_read_byte(aes_sbox+state->s[i]);
 9c4:	ec 91       	ld	r30, X
 9c6:	f0 e0       	ldi	r31, 0x00	; 0
 9c8:	ee 51       	subi	r30, 0x1E	; 30
 9ca:	fe 4f       	sbci	r31, 0xFE	; 254
 9cc:	e4 91       	lpm	r30, Z
 9ce:	ed 93       	st	X+, r30

static
void aes_enc_lastround(aes_cipher_state_t* state,const aes_roundkey_t* k){
	uint8_t i;
	/* subBytes */
	for(i=0; i<16; ++i){
 9d0:	a4 15       	cp	r26, r4
 9d2:	b5 05       	cpc	r27, r5
 9d4:	b9 f7       	brne	.-18     	; 0x9c4 <aes_encrypt_core+0x172>
		state->s[i] = pgm_read_byte(aes_sbox+state->s[i]);
	}
	/* shiftRows */
	aes_shiftcol(state->s+1, 1);
 9d6:	61 e0       	ldi	r22, 0x01	; 1
 9d8:	c7 01       	movw	r24, r14
 9da:	01 96       	adiw	r24, 0x01	; 1
 9dc:	0e 94 da 03 	call	0x7b4	; 0x7b4 <aes_shiftcol>
	aes_shiftcol(state->s+2, 2);
 9e0:	62 e0       	ldi	r22, 0x02	; 2
 9e2:	c7 01       	movw	r24, r14
 9e4:	02 96       	adiw	r24, 0x02	; 2
 9e6:	0e 94 da 03 	call	0x7b4	; 0x7b4 <aes_shiftcol>
	aes_shiftcol(state->s+3, 3);
 9ea:	63 e0       	ldi	r22, 0x03	; 3
 9ec:	c7 01       	movw	r24, r14
 9ee:	03 96       	adiw	r24, 0x03	; 3
 9f0:	0e 94 da 03 	call	0x7b4	; 0x7b4 <aes_shiftcol>
 9f4:	a9 89       	ldd	r26, Y+17	; 0x11
 9f6:	30 e1       	ldi	r19, 0x10	; 16
 9f8:	a3 9f       	mul	r26, r19
 9fa:	c0 01       	movw	r24, r0
 9fc:	11 24       	eor	r1, r1
 9fe:	20 e0       	ldi	r18, 0x00	; 0
 a00:	30 e0       	ldi	r19, 0x00	; 0
	/* keyAdd */
	for(i=0; i<16; ++i){
		state->s[i] ^= k->ks[i];
 a02:	fc 01       	movw	r30, r24
 a04:	e2 0f       	add	r30, r18
 a06:	f3 1f       	adc	r31, r19
 a08:	ea 0d       	add	r30, r10
 a0a:	fb 1d       	adc	r31, r11
 a0c:	aa 89       	ldd	r26, Y+18	; 0x12
 a0e:	bb 89       	ldd	r27, Y+19	; 0x13
 a10:	5c 91       	ld	r21, X
 a12:	40 81       	ld	r20, Z
 a14:	45 27       	eor	r20, r21
 a16:	4d 93       	st	X+, r20
 a18:	aa 8b       	std	Y+18, r26	; 0x12
 a1a:	bb 8b       	std	Y+19, r27	; 0x13
 a1c:	2f 5f       	subi	r18, 0xFF	; 255
 a1e:	3f 4f       	sbci	r19, 0xFF	; 255
	/* shiftRows */
	aes_shiftcol(state->s+1, 1);
	aes_shiftcol(state->s+2, 2);
	aes_shiftcol(state->s+3, 3);
	/* keyAdd */
	for(i=0; i<16; ++i){
 a20:	20 31       	cpi	r18, 0x10	; 16
 a22:	31 05       	cpc	r19, r1
 a24:	71 f7       	brne	.-36     	; 0xa02 <aes_encrypt_core+0x1b0>
	for(;rounds>1;--rounds){
		aes_enc_round(state, &(ks->key[i]));
		++i;
	}
	aes_enc_lastround(state, &(ks->key[i]));
}
 a26:	63 96       	adiw	r28, 0x13	; 19
 a28:	cd bf       	out	0x3d, r28	; 61
 a2a:	de bf       	out	0x3e, r29	; 62
 a2c:	df 91       	pop	r29
 a2e:	cf 91       	pop	r28
 a30:	1f 91       	pop	r17
 a32:	0f 91       	pop	r16
 a34:	ff 90       	pop	r15
 a36:	ef 90       	pop	r14
 a38:	df 90       	pop	r13
 a3a:	cf 90       	pop	r12
 a3c:	bf 90       	pop	r11
 a3e:	af 90       	pop	r10
 a40:	9f 90       	pop	r9
 a42:	8f 90       	pop	r8
 a44:	7f 90       	pop	r7
 a46:	6f 90       	pop	r6
 a48:	5f 90       	pop	r5
 a4a:	4f 90       	pop	r4
 a4c:	3f 90       	pop	r3
 a4e:	2f 90       	pop	r2
 a50:	08 95       	ret

00000a52 <aes_init>:

const uint8_t rc_tab[] PROGMEM = { 0x01, 0x02, 0x04, 0x08,
                             0x10, 0x20, 0x40, 0x80,
                             0x1b, 0x36 };

void aes_init(const void* key, uint16_t keysize_b, aes_genctx_t* ctx){
 a52:	8f 92       	push	r8
 a54:	9f 92       	push	r9
 a56:	af 92       	push	r10
 a58:	bf 92       	push	r11
 a5a:	cf 92       	push	r12
 a5c:	df 92       	push	r13
 a5e:	ef 92       	push	r14
 a60:	ff 92       	push	r15
 a62:	0f 93       	push	r16
 a64:	1f 93       	push	r17
 a66:	cf 93       	push	r28
 a68:	df 93       	push	r29
 a6a:	ea 01       	movw	r28, r20
	uint8_t rc=0;
	union {
		uint32_t v32;
		uint8_t  v8[4];
	} tmp;
	nk=keysize_b>>5; /* 4, 6, 8 */
 a6c:	6b 01       	movw	r12, r22
 a6e:	f5 e0       	ldi	r31, 0x05	; 5
 a70:	d6 94       	lsr	r13
 a72:	c7 94       	ror	r12
 a74:	fa 95       	dec	r31
 a76:	e1 f7       	brne	.-8      	; 0xa70 <aes_init+0x1e>
 a78:	ec 2c       	mov	r14, r12
	hi=4*(nk+6+1);
 a7a:	86 01       	movw	r16, r12
 a7c:	11 27       	eor	r17, r17
 a7e:	98 01       	movw	r18, r16
 a80:	29 5f       	subi	r18, 0xF9	; 249
 a82:	3f 4f       	sbci	r19, 0xFF	; 255
 a84:	f2 2e       	mov	r15, r18
 a86:	ff 0c       	add	r15, r15
 a88:	ff 0c       	add	r15, r15
	memcpy(ctx, key, keysize_b/8);
 a8a:	ab 01       	movw	r20, r22
 a8c:	a3 e0       	ldi	r26, 0x03	; 3
 a8e:	56 95       	lsr	r21
 a90:	47 95       	ror	r20
 a92:	aa 95       	dec	r26
 a94:	e1 f7       	brne	.-8      	; 0xa8e <aes_init+0x3c>
 a96:	bc 01       	movw	r22, r24
 a98:	ce 01       	movw	r24, r28
 a9a:	0e 94 10 06 	call	0xc20	; 0xc20 <memcpy>
	next_nk = nk;
 a9e:	dc 2c       	mov	r13, r12
	for(i=nk;i<hi;++i){
 aa0:	2c 2d       	mov	r18, r12
                             0x10, 0x20, 0x40, 0x80,
                             0x1b, 0x36 };

void aes_init(const void* key, uint16_t keysize_b, aes_genctx_t* ctx){
	uint8_t hi,i,nk, next_nk;
	uint8_t rc=0;
 aa2:	30 e0       	ldi	r19, 0x00	; 0
	} tmp;
	nk=keysize_b>>5; /* 4, 6, 8 */
	hi=4*(nk+6+1);
	memcpy(ctx, key, keysize_b/8);
	next_nk = nk;
	for(i=nk;i<hi;++i){
 aa4:	2f 15       	cp	r18, r15
 aa6:	08 f0       	brcs	.+2      	; 0xaaa <aes_init+0x58>
 aa8:	6e c0       	rjmp	.+220    	; 0xb86 <aes_init+0x134>
		tmp.v32 = ((uint32_t*)(ctx->key[0].ks))[i-1];
 aaa:	62 2f       	mov	r22, r18
 aac:	70 e0       	ldi	r23, 0x00	; 0
 aae:	ab 01       	movw	r20, r22
 ab0:	41 50       	subi	r20, 0x01	; 1
 ab2:	50 4c       	sbci	r21, 0xC0	; 192
 ab4:	44 0f       	add	r20, r20
 ab6:	55 1f       	adc	r21, r21
 ab8:	44 0f       	add	r20, r20
 aba:	55 1f       	adc	r21, r21
 abc:	4c 0f       	add	r20, r28
 abe:	5d 1f       	adc	r21, r29
 ac0:	fa 01       	movw	r30, r20
 ac2:	80 81       	ld	r24, Z
 ac4:	91 81       	ldd	r25, Z+1	; 0x01
 ac6:	a2 81       	ldd	r26, Z+2	; 0x02
 ac8:	b3 81       	ldd	r27, Z+3	; 0x03
		if(i!=next_nk){
 aca:	2d 15       	cp	r18, r13
 acc:	09 f1       	breq	.+66     	; 0xb10 <aes_init+0xbe>
			if(nk==8 && i%8==4){
 ace:	f8 e0       	ldi	r31, 0x08	; 8
 ad0:	ef 12       	cpse	r14, r31
 ad2:	41 c0       	rjmp	.+130    	; 0xb56 <aes_init+0x104>
 ad4:	e2 2f       	mov	r30, r18
 ad6:	e7 70       	andi	r30, 0x07	; 7
 ad8:	e4 30       	cpi	r30, 0x04	; 4
 ada:	09 f0       	breq	.+2      	; 0xade <aes_init+0x8c>
 adc:	3c c0       	rjmp	.+120    	; 0xb56 <aes_init+0x104>
				tmp.v8[0] = pgm_read_byte(aes_sbox+tmp.v8[0]);
 ade:	e8 2f       	mov	r30, r24
 ae0:	f0 e0       	ldi	r31, 0x00	; 0
 ae2:	ee 51       	subi	r30, 0x1E	; 30
 ae4:	fe 4f       	sbci	r31, 0xFE	; 254
 ae6:	e4 91       	lpm	r30, Z
 ae8:	8e 2f       	mov	r24, r30
				tmp.v8[1] = pgm_read_byte(aes_sbox+tmp.v8[1]);
 aea:	e9 2f       	mov	r30, r25
 aec:	f0 e0       	ldi	r31, 0x00	; 0
 aee:	ee 51       	subi	r30, 0x1E	; 30
 af0:	fe 4f       	sbci	r31, 0xFE	; 254
 af2:	e4 91       	lpm	r30, Z
 af4:	9e 2f       	mov	r25, r30
				tmp.v8[2] = pgm_read_byte(aes_sbox+tmp.v8[2]);
 af6:	ea 2f       	mov	r30, r26
 af8:	f0 e0       	ldi	r31, 0x00	; 0
 afa:	ee 51       	subi	r30, 0x1E	; 30
 afc:	fe 4f       	sbci	r31, 0xFE	; 254
 afe:	e4 91       	lpm	r30, Z
 b00:	ae 2f       	mov	r26, r30
				tmp.v8[3] = pgm_read_byte(aes_sbox+tmp.v8[3]);
 b02:	eb 2f       	mov	r30, r27
 b04:	f0 e0       	ldi	r31, 0x00	; 0
 b06:	ee 51       	subi	r30, 0x1E	; 30
 b08:	fe 4f       	sbci	r31, 0xFE	; 254
 b0a:	e4 91       	lpm	r30, Z
 b0c:	be 2f       	mov	r27, r30
 b0e:	23 c0       	rjmp	.+70     	; 0xb56 <aes_init+0x104>
			}
		} else {
			next_nk += nk;
 b10:	d2 2e       	mov	r13, r18
 b12:	de 0c       	add	r13, r14
#include <avr/pgmspace.h>

static
void aes_rotword(void* a){
	uint8_t t;
	t=((uint8_t*)a)[0];
 b14:	c8 2e       	mov	r12, r24
	((uint8_t*)a)[0] = ((uint8_t*)a)[1];
	((uint8_t*)a)[1] = ((uint8_t*)a)[2];
	((uint8_t*)a)[2] = ((uint8_t*)a)[3];
 b16:	ab 2e       	mov	r10, r27
				tmp.v8[3] = pgm_read_byte(aes_sbox+tmp.v8[3]);
			}
		} else {
			next_nk += nk;
			aes_rotword(&(tmp.v32));
			tmp.v8[0] = pgm_read_byte(aes_sbox+tmp.v8[0]);
 b18:	e9 2f       	mov	r30, r25
 b1a:	f0 e0       	ldi	r31, 0x00	; 0
 b1c:	ee 51       	subi	r30, 0x1E	; 30
 b1e:	fe 4f       	sbci	r31, 0xFE	; 254
 b20:	b4 90       	lpm	r11, Z
			tmp.v8[1] = pgm_read_byte(aes_sbox+tmp.v8[1]);
 b22:	ea 2f       	mov	r30, r26
 b24:	f0 e0       	ldi	r31, 0x00	; 0
 b26:	ee 51       	subi	r30, 0x1E	; 30
 b28:	fe 4f       	sbci	r31, 0xFE	; 254
 b2a:	e4 91       	lpm	r30, Z
 b2c:	9e 2f       	mov	r25, r30
			tmp.v8[2] = pgm_read_byte(aes_sbox+tmp.v8[2]);
 b2e:	ea 2d       	mov	r30, r10
 b30:	f0 e0       	ldi	r31, 0x00	; 0
 b32:	ee 51       	subi	r30, 0x1E	; 30
 b34:	fe 4f       	sbci	r31, 0xFE	; 254
 b36:	e4 91       	lpm	r30, Z
 b38:	ae 2f       	mov	r26, r30
			tmp.v8[3] = pgm_read_byte(aes_sbox+tmp.v8[3]);
 b3a:	ec 2d       	mov	r30, r12
 b3c:	f0 e0       	ldi	r31, 0x00	; 0
 b3e:	ee 51       	subi	r30, 0x1E	; 30
 b40:	fe 4f       	sbci	r31, 0xFE	; 254
 b42:	e4 91       	lpm	r30, Z
 b44:	be 2f       	mov	r27, r30
			tmp.v8[0] ^= pgm_read_byte(rc_tab+rc);
 b46:	e3 2f       	mov	r30, r19
 b48:	f0 e0       	ldi	r31, 0x00	; 0
 b4a:	e8 52       	subi	r30, 0x28	; 40
 b4c:	fe 4f       	sbci	r31, 0xFE	; 254
 b4e:	e4 91       	lpm	r30, Z
 b50:	8b 2d       	mov	r24, r11
 b52:	8e 27       	eor	r24, r30
			rc++;
 b54:	3f 5f       	subi	r19, 0xFF	; 255
		}
		((uint32_t*)(ctx->key[0].ks))[i] = ((uint32_t*)(ctx->key[0].ks))[i-nk]
 b56:	fb 01       	movw	r30, r22
 b58:	e0 1b       	sub	r30, r16
 b5a:	f1 0b       	sbc	r31, r17
 b5c:	ee 0f       	add	r30, r30
 b5e:	ff 1f       	adc	r31, r31
 b60:	ee 0f       	add	r30, r30
 b62:	ff 1f       	adc	r31, r31
 b64:	ec 0f       	add	r30, r28
 b66:	fd 1f       	adc	r31, r29
 b68:	80 80       	ld	r8, Z
 b6a:	91 80       	ldd	r9, Z+1	; 0x01
 b6c:	a2 80       	ldd	r10, Z+2	; 0x02
 b6e:	b3 80       	ldd	r11, Z+3	; 0x03
 b70:	88 25       	eor	r24, r8
 b72:	99 25       	eor	r25, r9
 b74:	aa 25       	eor	r26, r10
 b76:	bb 25       	eor	r27, r11
 b78:	fa 01       	movw	r30, r20
 b7a:	84 83       	std	Z+4, r24	; 0x04
 b7c:	95 83       	std	Z+5, r25	; 0x05
 b7e:	a6 83       	std	Z+6, r26	; 0x06
 b80:	b7 83       	std	Z+7, r27	; 0x07
	} tmp;
	nk=keysize_b>>5; /* 4, 6, 8 */
	hi=4*(nk+6+1);
	memcpy(ctx, key, keysize_b/8);
	next_nk = nk;
	for(i=nk;i<hi;++i){
 b82:	2f 5f       	subi	r18, 0xFF	; 255
 b84:	8f cf       	rjmp	.-226    	; 0xaa4 <aes_init+0x52>
			rc++;
		}
		((uint32_t*)(ctx->key[0].ks))[i] = ((uint32_t*)(ctx->key[0].ks))[i-nk]
		                                   ^ tmp.v32;
	}
}
 b86:	df 91       	pop	r29
 b88:	cf 91       	pop	r28
 b8a:	1f 91       	pop	r17
 b8c:	0f 91       	pop	r16
 b8e:	ff 90       	pop	r15
 b90:	ef 90       	pop	r14
 b92:	df 90       	pop	r13
 b94:	cf 90       	pop	r12
 b96:	bf 90       	pop	r11
 b98:	af 90       	pop	r10
 b9a:	9f 90       	pop	r9
 b9c:	8f 90       	pop	r8
 b9e:	08 95       	ret

00000ba0 <aes128_init>:

void aes128_init(const void* key, aes128_ctx_t* ctx){
 ba0:	ab 01       	movw	r20, r22
	aes_init(key, 128, (aes_genctx_t*)ctx);
 ba2:	60 e8       	ldi	r22, 0x80	; 128
 ba4:	70 e0       	ldi	r23, 0x00	; 0
 ba6:	0c 94 29 05 	jmp	0xa52	; 0xa52 <aes_init>

00000baa <aes192_init>:
}

void aes192_init(const void* key, aes192_ctx_t* ctx){
 baa:	ab 01       	movw	r20, r22
	aes_init(key, 192, (aes_genctx_t*)ctx);
 bac:	60 ec       	ldi	r22, 0xC0	; 192
 bae:	70 e0       	ldi	r23, 0x00	; 0
 bb0:	0c 94 29 05 	jmp	0xa52	; 0xa52 <aes_init>

00000bb4 <aes256_init>:
}

void aes256_init(const void* key, aes256_ctx_t* ctx){
 bb4:	ab 01       	movw	r20, r22
	aes_init(key, 256, (aes_genctx_t*)ctx);
 bb6:	60 e0       	ldi	r22, 0x00	; 0
 bb8:	71 e0       	ldi	r23, 0x01	; 1
 bba:	0c 94 29 05 	jmp	0xa52	; 0xa52 <aes_init>

00000bbe <aes128_enc>:

#include "aes.h"
#include "aes_enc.h"

void aes128_enc(void* buffer, aes128_ctx_t* ctx){
	aes_encrypt_core(buffer, (aes_genctx_t*)ctx, 10);
 bbe:	4a e0       	ldi	r20, 0x0A	; 10
 bc0:	0c 94 29 04 	jmp	0x852	; 0x852 <aes_encrypt_core>

00000bc4 <gf256mul>:
P = 24
.global gf256mul

#ifdef OPTIMIZE_SMALL_A
gf256mul:
	mov A, r24
 bc4:	78 2f       	mov	r23, r24
	clr r24
 bc6:	88 27       	eor	r24, r24
1:	
	lsr A
 bc8:	76 95       	lsr	r23
	breq 4f
 bca:	31 f0       	breq	.+12     	; 0xbd8 <gf256mul+0x14>
	brcc 2f
 bcc:	08 f4       	brcc	.+2      	; 0xbd0 <gf256mul+0xc>
	eor P, B
 bce:	86 27       	eor	r24, r22
2:
	lsl B
 bd0:	66 0f       	add	r22, r22
	brcc 3f
 bd2:	08 f4       	brcc	.+2      	; 0xbd6 <gf256mul+0x12>
	eor B, r20	
 bd4:	64 27       	eor	r22, r20
3:
	rjmp 1b
 bd6:	f8 cf       	rjmp	.-16     	; 0xbc8 <gf256mul+0x4>
4:
	brcc 2f
 bd8:	08 f4       	brcc	.+2      	; 0xbdc <gf256mul+0x18>
	eor P, B
 bda:	86 27       	eor	r24, r22
2:
	ret
 bdc:	08 95       	ret

00000bde <main>:
	return 0x00;
}

int main(void)
{
    platform_init();
 bde:	0e 94 b5 03 	call	0x76a	; 0x76a <platform_init>
	init_uart();	
 be2:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <init_uart0>
	trigger_setup();
 be6:	81 e0       	ldi	r24, 0x01	; 1
 be8:	80 93 01 06 	sts	0x0601, r24	; 0x800601 <__TEXT_REGION_LENGTH__+0x700601>
	putch('l');
	putch('o');
	putch('\n');
	*/
		
	simpleserial_init();		
 bec:	0e 94 1b 02 	call	0x436	; 0x436 <simpleserial_init>
	simpleserial_addcmd('k', 16, get_key);
 bf0:	4f ea       	ldi	r20, 0xAF	; 175
 bf2:	51 e0       	ldi	r21, 0x01	; 1
 bf4:	60 e1       	ldi	r22, 0x10	; 16
 bf6:	70 e0       	ldi	r23, 0x00	; 0
 bf8:	8b e6       	ldi	r24, 0x6B	; 107
 bfa:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <simpleserial_addcmd>
	simpleserial_addcmd('p', 16, get_pt);
 bfe:	46 e9       	ldi	r20, 0x96	; 150
 c00:	51 e0       	ldi	r21, 0x01	; 1
 c02:	60 e1       	ldi	r22, 0x10	; 16
 c04:	70 e0       	ldi	r23, 0x00	; 0
 c06:	80 e7       	ldi	r24, 0x70	; 112
 c08:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <simpleserial_addcmd>
	simpleserial_addcmd('x', 0, reset);
 c0c:	44 e9       	ldi	r20, 0x94	; 148
 c0e:	51 e0       	ldi	r21, 0x01	; 1
 c10:	60 e0       	ldi	r22, 0x00	; 0
 c12:	70 e0       	ldi	r23, 0x00	; 0
 c14:	88 e7       	ldi	r24, 0x78	; 120
 c16:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <simpleserial_addcmd>
	while(1)
		simpleserial_get();
 c1a:	0e 94 56 02 	call	0x4ac	; 0x4ac <simpleserial_get>
 c1e:	fd cf       	rjmp	.-6      	; 0xc1a <main+0x3c>

00000c20 <memcpy>:
 c20:	fb 01       	movw	r30, r22
 c22:	dc 01       	movw	r26, r24
 c24:	02 c0       	rjmp	.+4      	; 0xc2a <memcpy+0xa>
 c26:	01 90       	ld	r0, Z+
 c28:	0d 92       	st	X+, r0
 c2a:	41 50       	subi	r20, 0x01	; 1
 c2c:	50 40       	sbci	r21, 0x00	; 0
 c2e:	d8 f7       	brcc	.-10     	; 0xc26 <memcpy+0x6>
 c30:	08 95       	ret

00000c32 <_exit>:
 c32:	f8 94       	cli

00000c34 <__stop_program>:
 c34:	ff cf       	rjmp	.-2      	; 0xc34 <__stop_program>
